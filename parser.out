Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> start
Rule 1     start -> PROGRAM ID SEMICOLON variable_block functions main_body
Rule 2     functions -> FUNCTION ID LPAREN function_variables RPAREN COLON INTEGER SEMICOLON variable_block main_body functions
Rule 3     functions -> FUNCTION ID LPAREN function_variables RPAREN COLON REAL SEMICOLON variable_block main_body functions
Rule 4     functions -> FUNCTION ID LPAREN function_variables RPAREN COLON BOOLEAN SEMICOLON variable_block main_body functions
Rule 5     functions -> FUNCTION ID LPAREN function_variables RPAREN COLON STRING SEMICOLON variable_block main_body functions
Rule 6     functions -> FUNCTION ID LPAREN function_variables RPAREN COLON CHARACTER SEMICOLON variable_block main_body functions
Rule 7     functions -> PROCEDURE ID SEMICOLON variable_block main_body functions
Rule 8     functions -> empty
Rule 9     function_variables -> ID COLON INTEGER
Rule 10    function_variables -> ID COLON REAL
Rule 11    function_variables -> ID COLON BOOLEAN
Rule 12    function_variables -> ID COLON STRING
Rule 13    function_variables -> ID COLON CHARACTER
Rule 14    function_variables -> ID COLON INTEGER COMMA function_variables
Rule 15    function_variables -> ID COLON REAL COMMA function_variables
Rule 16    function_variables -> ID COLON BOOLEAN COMMA function_variables
Rule 17    function_variables -> ID COLON STRING COMMA function_variables
Rule 18    function_variables -> ID COLON CHARACTER COMMA function_variables
Rule 19    function_variables -> ID COLON INTEGER SEMICOLON function_variables
Rule 20    function_variables -> ID COLON REAL SEMICOLON function_variables
Rule 21    function_variables -> ID COLON BOOLEAN SEMICOLON function_variables
Rule 22    function_variables -> ID COLON STRING SEMICOLON function_variables
Rule 23    function_variables -> ID COLON CHARACTER SEMICOLON function_variables
Rule 24    function_variables -> empty
Rule 25    main_body -> BEGIN body END
Rule 26    write -> WRITE LPAREN STR RPAREN SEMICOLON
Rule 27    write -> WRITE LPAREN expression RPAREN SEMICOLON
Rule 28    body -> while_loop body
Rule 29    body -> for_loop body
Rule 30    body -> repeat_loop body
Rule 31    body -> if_statement body
Rule 32    body -> expression body
Rule 33    body -> var_assign body
Rule 34    body -> write body
Rule 35    body -> empty
Rule 36    while_loop -> WHILE boolean_expression DO main_body
Rule 37    for_loop -> FOR ID ASSIGN TO INT DO main_body
Rule 38    for_loop -> FOR ID ASSIGN DOWNTO INT DO main_body
Rule 39    for_loop -> FOR ID ASSIGN INT DOWNTO INT DO main_body
Rule 40    for_loop -> FOR ID ASSIGN INT TO INT DO main_body
Rule 41    repeat_loop -> REPEAT body UNTIL boolean_expression SEMICOLON
Rule 42    if_statement -> IF boolean_expression THEN main_body
Rule 43    if_statement -> IF boolean_expression THEN main_body ELSE main_body
Rule 44    numeric -> INT
Rule 45    numeric -> RE
Rule 46    numeric -> ID
Rule 47    boolean_expression -> expression LESSER expression
Rule 48    boolean_expression -> expression LESSER_EQUAL expression
Rule 49    boolean_expression -> expression EQUAL expression
Rule 50    boolean_expression -> expression GREATER_EQUAL expression
Rule 51    boolean_expression -> expression GREATER expression
Rule 52    boolean_expression -> NOT boolean_expression
Rule 53    boolean_expression -> boolean_expression and_or boolean_expression
Rule 54    boolean_expression -> LPAREN boolean_expression RPAREN
Rule 55    boolean_expression -> BOOL
Rule 56    and_or -> AND
Rule 57    and_or -> OR
Rule 58    var_assign -> ID ASSIGN STR SEMICOLON
Rule 59    var_assign -> ID ASSIGN CHAR SEMICOLON
Rule 60    var_assign -> ID ASSIGN BOOL SEMICOLON
Rule 61    var_assign -> ID ASSIGN expression SEMICOLON
Rule 62    var_assign -> ID SEMICOLON
Rule 63    function_call -> ID LPAREN vars RPAREN
Rule 64    vars -> STR COMMA vars
Rule 65    vars -> BOOL COMMA vars
Rule 66    vars -> CHAR COMMA vars
Rule 67    vars -> expression COMMA vars
Rule 68    vars -> expression
Rule 69    vars -> STR
Rule 70    vars -> BOOL
Rule 71    vars -> CHAR
Rule 72    expression -> expression PLUS expression
Rule 73    expression -> expression MINUS expression
Rule 74    expression -> expression TIMES expression
Rule 75    expression -> expression DIVIDE expression
Rule 76    expression -> expression MOD expression
Rule 77    expression -> LPAREN expression RPAREN
Rule 78    expression -> numeric
Rule 79    expression -> function_call
Rule 80    variable_block -> empty
Rule 81    variable_block -> VAR variables
Rule 82    variables -> variable_describe
Rule 83    variables -> variable_describe variables
Rule 84    variable_describe -> ID COLON STRING SEMICOLON
Rule 85    variable_describe -> ID COLON INTEGER SEMICOLON
Rule 86    variable_describe -> ID COLON CHARACTER SEMICOLON
Rule 87    variable_describe -> ID COLON BOOLEAN SEMICOLON
Rule 88    variable_describe -> ID COLON REAL SEMICOLON
Rule 89    empty -> <empty>

Terminals, with rules where they appear

AND                  : 56
ASSIGN               : 37 38 39 40 58 59 60 61
BEGIN                : 25
BOOL                 : 55 60 65 70
BOOLEAN              : 4 11 16 21 87
CHAR                 : 59 66 71
CHARACTER            : 6 13 18 23 86
COLON                : 2 3 4 5 6 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 84 85 86 87 88
COMMA                : 14 15 16 17 18 64 65 66 67
DIVIDE               : 75
DO                   : 36 37 38 39 40
DOWNTO               : 38 39
ELSE                 : 43
END                  : 25
EQUAL                : 49
FOR                  : 37 38 39 40
FUNCTION             : 2 3 4 5 6
GREATER              : 51
GREATER_EQUAL        : 50
ID                   : 1 2 3 4 5 6 7 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 37 38 39 40 46 58 59 60 61 62 63 84 85 86 87 88
IF                   : 42 43
INT                  : 37 38 39 39 40 40 44
INTEGER              : 2 9 14 19 85
LESSER               : 47
LESSER_EQUAL         : 48
LPAREN               : 2 3 4 5 6 26 27 54 63 77
MINUS                : 73
MOD                  : 76
NOT                  : 52
OR                   : 57
PLUS                 : 72
PROCEDURE            : 7
PROGRAM              : 1
RE                   : 45
REAL                 : 3 10 15 20 88
REPEAT               : 41
RPAREN               : 2 3 4 5 6 26 27 54 63 77
SEMICOLON            : 1 2 3 4 5 6 7 19 20 21 22 23 26 27 41 58 59 60 61 62 84 85 86 87 88
STR                  : 26 58 64 69
STRING               : 5 12 17 22 84
THEN                 : 42 43
TIMES                : 74
TO                   : 37 40
UNTIL                : 41
VAR                  : 81
WHILE                : 36
WRITE                : 26 27
error                : 

Nonterminals, with rules where they appear

and_or               : 53
body                 : 25 28 29 30 31 32 33 34 41
boolean_expression   : 36 41 42 43 52 53 53 54
empty                : 8 24 35 80
expression           : 27 32 47 47 48 48 49 49 50 50 51 51 61 67 68 72 72 73 73 74 74 75 75 76 76 77
for_loop             : 29
function_call        : 79
function_variables   : 2 3 4 5 6 14 15 16 17 18 19 20 21 22 23
functions            : 1 2 3 4 5 6 7
if_statement         : 31
main_body            : 1 2 3 4 5 6 7 36 37 38 39 40 42 43 43
numeric              : 78
repeat_loop          : 30
start                : 0
var_assign           : 33
variable_block       : 1 2 3 4 5 6 7
variable_describe    : 82 83
variables            : 81 83
vars                 : 63 64 65 66 67
while_loop           : 28
write                : 34

Parsing method: LALR

state 0

    (0) S' -> . start
    (1) start -> . PROGRAM ID SEMICOLON variable_block functions main_body

    PROGRAM         shift and go to state 2

    start                          shift and go to state 1

state 1

    (0) S' -> start .



state 2

    (1) start -> PROGRAM . ID SEMICOLON variable_block functions main_body

    ID              shift and go to state 3


state 3

    (1) start -> PROGRAM ID . SEMICOLON variable_block functions main_body

    SEMICOLON       shift and go to state 4


state 4

    (1) start -> PROGRAM ID SEMICOLON . variable_block functions main_body
    (80) variable_block -> . empty
    (81) variable_block -> . VAR variables
    (89) empty -> .

    VAR             shift and go to state 7
    FUNCTION        reduce using rule 89 (empty -> .)
    PROCEDURE       reduce using rule 89 (empty -> .)
    BEGIN           reduce using rule 89 (empty -> .)

    variable_block                 shift and go to state 5
    empty                          shift and go to state 6

state 5

    (1) start -> PROGRAM ID SEMICOLON variable_block . functions main_body
    (2) functions -> . FUNCTION ID LPAREN function_variables RPAREN COLON INTEGER SEMICOLON variable_block main_body functions
    (3) functions -> . FUNCTION ID LPAREN function_variables RPAREN COLON REAL SEMICOLON variable_block main_body functions
    (4) functions -> . FUNCTION ID LPAREN function_variables RPAREN COLON BOOLEAN SEMICOLON variable_block main_body functions
    (5) functions -> . FUNCTION ID LPAREN function_variables RPAREN COLON STRING SEMICOLON variable_block main_body functions
    (6) functions -> . FUNCTION ID LPAREN function_variables RPAREN COLON CHARACTER SEMICOLON variable_block main_body functions
    (7) functions -> . PROCEDURE ID SEMICOLON variable_block main_body functions
    (8) functions -> . empty
    (89) empty -> .

    FUNCTION        shift and go to state 9
    PROCEDURE       shift and go to state 10
    BEGIN           reduce using rule 89 (empty -> .)

    functions                      shift and go to state 8
    empty                          shift and go to state 11

state 6

    (80) variable_block -> empty .

    FUNCTION        reduce using rule 80 (variable_block -> empty .)
    PROCEDURE       reduce using rule 80 (variable_block -> empty .)
    BEGIN           reduce using rule 80 (variable_block -> empty .)


state 7

    (81) variable_block -> VAR . variables
    (82) variables -> . variable_describe
    (83) variables -> . variable_describe variables
    (84) variable_describe -> . ID COLON STRING SEMICOLON
    (85) variable_describe -> . ID COLON INTEGER SEMICOLON
    (86) variable_describe -> . ID COLON CHARACTER SEMICOLON
    (87) variable_describe -> . ID COLON BOOLEAN SEMICOLON
    (88) variable_describe -> . ID COLON REAL SEMICOLON

    ID              shift and go to state 14

    variables                      shift and go to state 12
    variable_describe              shift and go to state 13

state 8

    (1) start -> PROGRAM ID SEMICOLON variable_block functions . main_body
    (25) main_body -> . BEGIN body END

    BEGIN           shift and go to state 16

    main_body                      shift and go to state 15

state 9

    (2) functions -> FUNCTION . ID LPAREN function_variables RPAREN COLON INTEGER SEMICOLON variable_block main_body functions
    (3) functions -> FUNCTION . ID LPAREN function_variables RPAREN COLON REAL SEMICOLON variable_block main_body functions
    (4) functions -> FUNCTION . ID LPAREN function_variables RPAREN COLON BOOLEAN SEMICOLON variable_block main_body functions
    (5) functions -> FUNCTION . ID LPAREN function_variables RPAREN COLON STRING SEMICOLON variable_block main_body functions
    (6) functions -> FUNCTION . ID LPAREN function_variables RPAREN COLON CHARACTER SEMICOLON variable_block main_body functions

    ID              shift and go to state 17


state 10

    (7) functions -> PROCEDURE . ID SEMICOLON variable_block main_body functions

    ID              shift and go to state 18


state 11

    (8) functions -> empty .

    BEGIN           reduce using rule 8 (functions -> empty .)


state 12

    (81) variable_block -> VAR variables .

    FUNCTION        reduce using rule 81 (variable_block -> VAR variables .)
    PROCEDURE       reduce using rule 81 (variable_block -> VAR variables .)
    BEGIN           reduce using rule 81 (variable_block -> VAR variables .)


state 13

    (82) variables -> variable_describe .
    (83) variables -> variable_describe . variables
    (82) variables -> . variable_describe
    (83) variables -> . variable_describe variables
    (84) variable_describe -> . ID COLON STRING SEMICOLON
    (85) variable_describe -> . ID COLON INTEGER SEMICOLON
    (86) variable_describe -> . ID COLON CHARACTER SEMICOLON
    (87) variable_describe -> . ID COLON BOOLEAN SEMICOLON
    (88) variable_describe -> . ID COLON REAL SEMICOLON

    FUNCTION        reduce using rule 82 (variables -> variable_describe .)
    PROCEDURE       reduce using rule 82 (variables -> variable_describe .)
    BEGIN           reduce using rule 82 (variables -> variable_describe .)
    ID              shift and go to state 14

    variable_describe              shift and go to state 13
    variables                      shift and go to state 19

state 14

    (84) variable_describe -> ID . COLON STRING SEMICOLON
    (85) variable_describe -> ID . COLON INTEGER SEMICOLON
    (86) variable_describe -> ID . COLON CHARACTER SEMICOLON
    (87) variable_describe -> ID . COLON BOOLEAN SEMICOLON
    (88) variable_describe -> ID . COLON REAL SEMICOLON

    COLON           shift and go to state 20


state 15

    (1) start -> PROGRAM ID SEMICOLON variable_block functions main_body .

    $end            reduce using rule 1 (start -> PROGRAM ID SEMICOLON variable_block functions main_body .)


state 16

    (25) main_body -> BEGIN . body END
    (28) body -> . while_loop body
    (29) body -> . for_loop body
    (30) body -> . repeat_loop body
    (31) body -> . if_statement body
    (32) body -> . expression body
    (33) body -> . var_assign body
    (34) body -> . write body
    (35) body -> . empty
    (36) while_loop -> . WHILE boolean_expression DO main_body
    (37) for_loop -> . FOR ID ASSIGN TO INT DO main_body
    (38) for_loop -> . FOR ID ASSIGN DOWNTO INT DO main_body
    (39) for_loop -> . FOR ID ASSIGN INT DOWNTO INT DO main_body
    (40) for_loop -> . FOR ID ASSIGN INT TO INT DO main_body
    (41) repeat_loop -> . REPEAT body UNTIL boolean_expression SEMICOLON
    (42) if_statement -> . IF boolean_expression THEN main_body
    (43) if_statement -> . IF boolean_expression THEN main_body ELSE main_body
    (72) expression -> . expression PLUS expression
    (73) expression -> . expression MINUS expression
    (74) expression -> . expression TIMES expression
    (75) expression -> . expression DIVIDE expression
    (76) expression -> . expression MOD expression
    (77) expression -> . LPAREN expression RPAREN
    (78) expression -> . numeric
    (79) expression -> . function_call
    (58) var_assign -> . ID ASSIGN STR SEMICOLON
    (59) var_assign -> . ID ASSIGN CHAR SEMICOLON
    (60) var_assign -> . ID ASSIGN BOOL SEMICOLON
    (61) var_assign -> . ID ASSIGN expression SEMICOLON
    (62) var_assign -> . ID SEMICOLON
    (26) write -> . WRITE LPAREN STR RPAREN SEMICOLON
    (27) write -> . WRITE LPAREN expression RPAREN SEMICOLON
    (89) empty -> .
    (44) numeric -> . INT
    (45) numeric -> . RE
    (46) numeric -> . ID
    (63) function_call -> . ID LPAREN vars RPAREN

    WHILE           shift and go to state 30
    FOR             shift and go to state 31
    REPEAT          shift and go to state 34
    IF              shift and go to state 35
    LPAREN          shift and go to state 36
    ID              shift and go to state 32
    WRITE           shift and go to state 39
    END             reduce using rule 89 (empty -> .)
    INT             shift and go to state 33
    RE              shift and go to state 40

    body                           shift and go to state 21
    while_loop                     shift and go to state 22
    for_loop                       shift and go to state 23
    repeat_loop                    shift and go to state 24
    if_statement                   shift and go to state 25
    expression                     shift and go to state 26
    var_assign                     shift and go to state 27
    write                          shift and go to state 28
    empty                          shift and go to state 29
    numeric                        shift and go to state 37
    function_call                  shift and go to state 38

state 17

    (2) functions -> FUNCTION ID . LPAREN function_variables RPAREN COLON INTEGER SEMICOLON variable_block main_body functions
    (3) functions -> FUNCTION ID . LPAREN function_variables RPAREN COLON REAL SEMICOLON variable_block main_body functions
    (4) functions -> FUNCTION ID . LPAREN function_variables RPAREN COLON BOOLEAN SEMICOLON variable_block main_body functions
    (5) functions -> FUNCTION ID . LPAREN function_variables RPAREN COLON STRING SEMICOLON variable_block main_body functions
    (6) functions -> FUNCTION ID . LPAREN function_variables RPAREN COLON CHARACTER SEMICOLON variable_block main_body functions

    LPAREN          shift and go to state 41


state 18

    (7) functions -> PROCEDURE ID . SEMICOLON variable_block main_body functions

    SEMICOLON       shift and go to state 42


state 19

    (83) variables -> variable_describe variables .

    FUNCTION        reduce using rule 83 (variables -> variable_describe variables .)
    PROCEDURE       reduce using rule 83 (variables -> variable_describe variables .)
    BEGIN           reduce using rule 83 (variables -> variable_describe variables .)


state 20

    (84) variable_describe -> ID COLON . STRING SEMICOLON
    (85) variable_describe -> ID COLON . INTEGER SEMICOLON
    (86) variable_describe -> ID COLON . CHARACTER SEMICOLON
    (87) variable_describe -> ID COLON . BOOLEAN SEMICOLON
    (88) variable_describe -> ID COLON . REAL SEMICOLON

    STRING          shift and go to state 43
    INTEGER         shift and go to state 44
    CHARACTER       shift and go to state 45
    BOOLEAN         shift and go to state 46
    REAL            shift and go to state 47


state 21

    (25) main_body -> BEGIN body . END

    END             shift and go to state 48


state 22

    (28) body -> while_loop . body
    (28) body -> . while_loop body
    (29) body -> . for_loop body
    (30) body -> . repeat_loop body
    (31) body -> . if_statement body
    (32) body -> . expression body
    (33) body -> . var_assign body
    (34) body -> . write body
    (35) body -> . empty
    (36) while_loop -> . WHILE boolean_expression DO main_body
    (37) for_loop -> . FOR ID ASSIGN TO INT DO main_body
    (38) for_loop -> . FOR ID ASSIGN DOWNTO INT DO main_body
    (39) for_loop -> . FOR ID ASSIGN INT DOWNTO INT DO main_body
    (40) for_loop -> . FOR ID ASSIGN INT TO INT DO main_body
    (41) repeat_loop -> . REPEAT body UNTIL boolean_expression SEMICOLON
    (42) if_statement -> . IF boolean_expression THEN main_body
    (43) if_statement -> . IF boolean_expression THEN main_body ELSE main_body
    (72) expression -> . expression PLUS expression
    (73) expression -> . expression MINUS expression
    (74) expression -> . expression TIMES expression
    (75) expression -> . expression DIVIDE expression
    (76) expression -> . expression MOD expression
    (77) expression -> . LPAREN expression RPAREN
    (78) expression -> . numeric
    (79) expression -> . function_call
    (58) var_assign -> . ID ASSIGN STR SEMICOLON
    (59) var_assign -> . ID ASSIGN CHAR SEMICOLON
    (60) var_assign -> . ID ASSIGN BOOL SEMICOLON
    (61) var_assign -> . ID ASSIGN expression SEMICOLON
    (62) var_assign -> . ID SEMICOLON
    (26) write -> . WRITE LPAREN STR RPAREN SEMICOLON
    (27) write -> . WRITE LPAREN expression RPAREN SEMICOLON
    (89) empty -> .
    (44) numeric -> . INT
    (45) numeric -> . RE
    (46) numeric -> . ID
    (63) function_call -> . ID LPAREN vars RPAREN

    WHILE           shift and go to state 30
    FOR             shift and go to state 31
    REPEAT          shift and go to state 34
    IF              shift and go to state 35
    LPAREN          shift and go to state 36
    ID              shift and go to state 32
    WRITE           shift and go to state 39
    END             reduce using rule 89 (empty -> .)
    UNTIL           reduce using rule 89 (empty -> .)
    INT             shift and go to state 33
    RE              shift and go to state 40

    while_loop                     shift and go to state 22
    body                           shift and go to state 49
    for_loop                       shift and go to state 23
    repeat_loop                    shift and go to state 24
    if_statement                   shift and go to state 25
    expression                     shift and go to state 26
    var_assign                     shift and go to state 27
    write                          shift and go to state 28
    empty                          shift and go to state 29
    numeric                        shift and go to state 37
    function_call                  shift and go to state 38

state 23

    (29) body -> for_loop . body
    (28) body -> . while_loop body
    (29) body -> . for_loop body
    (30) body -> . repeat_loop body
    (31) body -> . if_statement body
    (32) body -> . expression body
    (33) body -> . var_assign body
    (34) body -> . write body
    (35) body -> . empty
    (36) while_loop -> . WHILE boolean_expression DO main_body
    (37) for_loop -> . FOR ID ASSIGN TO INT DO main_body
    (38) for_loop -> . FOR ID ASSIGN DOWNTO INT DO main_body
    (39) for_loop -> . FOR ID ASSIGN INT DOWNTO INT DO main_body
    (40) for_loop -> . FOR ID ASSIGN INT TO INT DO main_body
    (41) repeat_loop -> . REPEAT body UNTIL boolean_expression SEMICOLON
    (42) if_statement -> . IF boolean_expression THEN main_body
    (43) if_statement -> . IF boolean_expression THEN main_body ELSE main_body
    (72) expression -> . expression PLUS expression
    (73) expression -> . expression MINUS expression
    (74) expression -> . expression TIMES expression
    (75) expression -> . expression DIVIDE expression
    (76) expression -> . expression MOD expression
    (77) expression -> . LPAREN expression RPAREN
    (78) expression -> . numeric
    (79) expression -> . function_call
    (58) var_assign -> . ID ASSIGN STR SEMICOLON
    (59) var_assign -> . ID ASSIGN CHAR SEMICOLON
    (60) var_assign -> . ID ASSIGN BOOL SEMICOLON
    (61) var_assign -> . ID ASSIGN expression SEMICOLON
    (62) var_assign -> . ID SEMICOLON
    (26) write -> . WRITE LPAREN STR RPAREN SEMICOLON
    (27) write -> . WRITE LPAREN expression RPAREN SEMICOLON
    (89) empty -> .
    (44) numeric -> . INT
    (45) numeric -> . RE
    (46) numeric -> . ID
    (63) function_call -> . ID LPAREN vars RPAREN

    WHILE           shift and go to state 30
    FOR             shift and go to state 31
    REPEAT          shift and go to state 34
    IF              shift and go to state 35
    LPAREN          shift and go to state 36
    ID              shift and go to state 32
    WRITE           shift and go to state 39
    END             reduce using rule 89 (empty -> .)
    UNTIL           reduce using rule 89 (empty -> .)
    INT             shift and go to state 33
    RE              shift and go to state 40

    for_loop                       shift and go to state 23
    body                           shift and go to state 50
    while_loop                     shift and go to state 22
    repeat_loop                    shift and go to state 24
    if_statement                   shift and go to state 25
    expression                     shift and go to state 26
    var_assign                     shift and go to state 27
    write                          shift and go to state 28
    empty                          shift and go to state 29
    numeric                        shift and go to state 37
    function_call                  shift and go to state 38

state 24

    (30) body -> repeat_loop . body
    (28) body -> . while_loop body
    (29) body -> . for_loop body
    (30) body -> . repeat_loop body
    (31) body -> . if_statement body
    (32) body -> . expression body
    (33) body -> . var_assign body
    (34) body -> . write body
    (35) body -> . empty
    (36) while_loop -> . WHILE boolean_expression DO main_body
    (37) for_loop -> . FOR ID ASSIGN TO INT DO main_body
    (38) for_loop -> . FOR ID ASSIGN DOWNTO INT DO main_body
    (39) for_loop -> . FOR ID ASSIGN INT DOWNTO INT DO main_body
    (40) for_loop -> . FOR ID ASSIGN INT TO INT DO main_body
    (41) repeat_loop -> . REPEAT body UNTIL boolean_expression SEMICOLON
    (42) if_statement -> . IF boolean_expression THEN main_body
    (43) if_statement -> . IF boolean_expression THEN main_body ELSE main_body
    (72) expression -> . expression PLUS expression
    (73) expression -> . expression MINUS expression
    (74) expression -> . expression TIMES expression
    (75) expression -> . expression DIVIDE expression
    (76) expression -> . expression MOD expression
    (77) expression -> . LPAREN expression RPAREN
    (78) expression -> . numeric
    (79) expression -> . function_call
    (58) var_assign -> . ID ASSIGN STR SEMICOLON
    (59) var_assign -> . ID ASSIGN CHAR SEMICOLON
    (60) var_assign -> . ID ASSIGN BOOL SEMICOLON
    (61) var_assign -> . ID ASSIGN expression SEMICOLON
    (62) var_assign -> . ID SEMICOLON
    (26) write -> . WRITE LPAREN STR RPAREN SEMICOLON
    (27) write -> . WRITE LPAREN expression RPAREN SEMICOLON
    (89) empty -> .
    (44) numeric -> . INT
    (45) numeric -> . RE
    (46) numeric -> . ID
    (63) function_call -> . ID LPAREN vars RPAREN

    WHILE           shift and go to state 30
    FOR             shift and go to state 31
    REPEAT          shift and go to state 34
    IF              shift and go to state 35
    LPAREN          shift and go to state 36
    ID              shift and go to state 32
    WRITE           shift and go to state 39
    END             reduce using rule 89 (empty -> .)
    UNTIL           reduce using rule 89 (empty -> .)
    INT             shift and go to state 33
    RE              shift and go to state 40

    repeat_loop                    shift and go to state 24
    body                           shift and go to state 51
    while_loop                     shift and go to state 22
    for_loop                       shift and go to state 23
    if_statement                   shift and go to state 25
    expression                     shift and go to state 26
    var_assign                     shift and go to state 27
    write                          shift and go to state 28
    empty                          shift and go to state 29
    numeric                        shift and go to state 37
    function_call                  shift and go to state 38

state 25

    (31) body -> if_statement . body
    (28) body -> . while_loop body
    (29) body -> . for_loop body
    (30) body -> . repeat_loop body
    (31) body -> . if_statement body
    (32) body -> . expression body
    (33) body -> . var_assign body
    (34) body -> . write body
    (35) body -> . empty
    (36) while_loop -> . WHILE boolean_expression DO main_body
    (37) for_loop -> . FOR ID ASSIGN TO INT DO main_body
    (38) for_loop -> . FOR ID ASSIGN DOWNTO INT DO main_body
    (39) for_loop -> . FOR ID ASSIGN INT DOWNTO INT DO main_body
    (40) for_loop -> . FOR ID ASSIGN INT TO INT DO main_body
    (41) repeat_loop -> . REPEAT body UNTIL boolean_expression SEMICOLON
    (42) if_statement -> . IF boolean_expression THEN main_body
    (43) if_statement -> . IF boolean_expression THEN main_body ELSE main_body
    (72) expression -> . expression PLUS expression
    (73) expression -> . expression MINUS expression
    (74) expression -> . expression TIMES expression
    (75) expression -> . expression DIVIDE expression
    (76) expression -> . expression MOD expression
    (77) expression -> . LPAREN expression RPAREN
    (78) expression -> . numeric
    (79) expression -> . function_call
    (58) var_assign -> . ID ASSIGN STR SEMICOLON
    (59) var_assign -> . ID ASSIGN CHAR SEMICOLON
    (60) var_assign -> . ID ASSIGN BOOL SEMICOLON
    (61) var_assign -> . ID ASSIGN expression SEMICOLON
    (62) var_assign -> . ID SEMICOLON
    (26) write -> . WRITE LPAREN STR RPAREN SEMICOLON
    (27) write -> . WRITE LPAREN expression RPAREN SEMICOLON
    (89) empty -> .
    (44) numeric -> . INT
    (45) numeric -> . RE
    (46) numeric -> . ID
    (63) function_call -> . ID LPAREN vars RPAREN

    WHILE           shift and go to state 30
    FOR             shift and go to state 31
    REPEAT          shift and go to state 34
    IF              shift and go to state 35
    LPAREN          shift and go to state 36
    ID              shift and go to state 32
    WRITE           shift and go to state 39
    END             reduce using rule 89 (empty -> .)
    UNTIL           reduce using rule 89 (empty -> .)
    INT             shift and go to state 33
    RE              shift and go to state 40

    if_statement                   shift and go to state 25
    body                           shift and go to state 52
    while_loop                     shift and go to state 22
    for_loop                       shift and go to state 23
    repeat_loop                    shift and go to state 24
    expression                     shift and go to state 26
    var_assign                     shift and go to state 27
    write                          shift and go to state 28
    empty                          shift and go to state 29
    numeric                        shift and go to state 37
    function_call                  shift and go to state 38

state 26

    (32) body -> expression . body
    (72) expression -> expression . PLUS expression
    (73) expression -> expression . MINUS expression
    (74) expression -> expression . TIMES expression
    (75) expression -> expression . DIVIDE expression
    (76) expression -> expression . MOD expression
    (28) body -> . while_loop body
    (29) body -> . for_loop body
    (30) body -> . repeat_loop body
    (31) body -> . if_statement body
    (32) body -> . expression body
    (33) body -> . var_assign body
    (34) body -> . write body
    (35) body -> . empty
    (36) while_loop -> . WHILE boolean_expression DO main_body
    (37) for_loop -> . FOR ID ASSIGN TO INT DO main_body
    (38) for_loop -> . FOR ID ASSIGN DOWNTO INT DO main_body
    (39) for_loop -> . FOR ID ASSIGN INT DOWNTO INT DO main_body
    (40) for_loop -> . FOR ID ASSIGN INT TO INT DO main_body
    (41) repeat_loop -> . REPEAT body UNTIL boolean_expression SEMICOLON
    (42) if_statement -> . IF boolean_expression THEN main_body
    (43) if_statement -> . IF boolean_expression THEN main_body ELSE main_body
    (72) expression -> . expression PLUS expression
    (73) expression -> . expression MINUS expression
    (74) expression -> . expression TIMES expression
    (75) expression -> . expression DIVIDE expression
    (76) expression -> . expression MOD expression
    (77) expression -> . LPAREN expression RPAREN
    (78) expression -> . numeric
    (79) expression -> . function_call
    (58) var_assign -> . ID ASSIGN STR SEMICOLON
    (59) var_assign -> . ID ASSIGN CHAR SEMICOLON
    (60) var_assign -> . ID ASSIGN BOOL SEMICOLON
    (61) var_assign -> . ID ASSIGN expression SEMICOLON
    (62) var_assign -> . ID SEMICOLON
    (26) write -> . WRITE LPAREN STR RPAREN SEMICOLON
    (27) write -> . WRITE LPAREN expression RPAREN SEMICOLON
    (89) empty -> .
    (44) numeric -> . INT
    (45) numeric -> . RE
    (46) numeric -> . ID
    (63) function_call -> . ID LPAREN vars RPAREN

    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    TIMES           shift and go to state 56
    DIVIDE          shift and go to state 57
    MOD             shift and go to state 58
    WHILE           shift and go to state 30
    FOR             shift and go to state 31
    REPEAT          shift and go to state 34
    IF              shift and go to state 35
    LPAREN          shift and go to state 36
    ID              shift and go to state 32
    WRITE           shift and go to state 39
    END             reduce using rule 89 (empty -> .)
    UNTIL           reduce using rule 89 (empty -> .)
    INT             shift and go to state 33
    RE              shift and go to state 40

    expression                     shift and go to state 26
    body                           shift and go to state 53
    while_loop                     shift and go to state 22
    for_loop                       shift and go to state 23
    repeat_loop                    shift and go to state 24
    if_statement                   shift and go to state 25
    var_assign                     shift and go to state 27
    write                          shift and go to state 28
    empty                          shift and go to state 29
    numeric                        shift and go to state 37
    function_call                  shift and go to state 38

state 27

    (33) body -> var_assign . body
    (28) body -> . while_loop body
    (29) body -> . for_loop body
    (30) body -> . repeat_loop body
    (31) body -> . if_statement body
    (32) body -> . expression body
    (33) body -> . var_assign body
    (34) body -> . write body
    (35) body -> . empty
    (36) while_loop -> . WHILE boolean_expression DO main_body
    (37) for_loop -> . FOR ID ASSIGN TO INT DO main_body
    (38) for_loop -> . FOR ID ASSIGN DOWNTO INT DO main_body
    (39) for_loop -> . FOR ID ASSIGN INT DOWNTO INT DO main_body
    (40) for_loop -> . FOR ID ASSIGN INT TO INT DO main_body
    (41) repeat_loop -> . REPEAT body UNTIL boolean_expression SEMICOLON
    (42) if_statement -> . IF boolean_expression THEN main_body
    (43) if_statement -> . IF boolean_expression THEN main_body ELSE main_body
    (72) expression -> . expression PLUS expression
    (73) expression -> . expression MINUS expression
    (74) expression -> . expression TIMES expression
    (75) expression -> . expression DIVIDE expression
    (76) expression -> . expression MOD expression
    (77) expression -> . LPAREN expression RPAREN
    (78) expression -> . numeric
    (79) expression -> . function_call
    (58) var_assign -> . ID ASSIGN STR SEMICOLON
    (59) var_assign -> . ID ASSIGN CHAR SEMICOLON
    (60) var_assign -> . ID ASSIGN BOOL SEMICOLON
    (61) var_assign -> . ID ASSIGN expression SEMICOLON
    (62) var_assign -> . ID SEMICOLON
    (26) write -> . WRITE LPAREN STR RPAREN SEMICOLON
    (27) write -> . WRITE LPAREN expression RPAREN SEMICOLON
    (89) empty -> .
    (44) numeric -> . INT
    (45) numeric -> . RE
    (46) numeric -> . ID
    (63) function_call -> . ID LPAREN vars RPAREN

    WHILE           shift and go to state 30
    FOR             shift and go to state 31
    REPEAT          shift and go to state 34
    IF              shift and go to state 35
    LPAREN          shift and go to state 36
    ID              shift and go to state 32
    WRITE           shift and go to state 39
    END             reduce using rule 89 (empty -> .)
    UNTIL           reduce using rule 89 (empty -> .)
    INT             shift and go to state 33
    RE              shift and go to state 40

    var_assign                     shift and go to state 27
    body                           shift and go to state 59
    while_loop                     shift and go to state 22
    for_loop                       shift and go to state 23
    repeat_loop                    shift and go to state 24
    if_statement                   shift and go to state 25
    expression                     shift and go to state 26
    write                          shift and go to state 28
    empty                          shift and go to state 29
    numeric                        shift and go to state 37
    function_call                  shift and go to state 38

state 28

    (34) body -> write . body
    (28) body -> . while_loop body
    (29) body -> . for_loop body
    (30) body -> . repeat_loop body
    (31) body -> . if_statement body
    (32) body -> . expression body
    (33) body -> . var_assign body
    (34) body -> . write body
    (35) body -> . empty
    (36) while_loop -> . WHILE boolean_expression DO main_body
    (37) for_loop -> . FOR ID ASSIGN TO INT DO main_body
    (38) for_loop -> . FOR ID ASSIGN DOWNTO INT DO main_body
    (39) for_loop -> . FOR ID ASSIGN INT DOWNTO INT DO main_body
    (40) for_loop -> . FOR ID ASSIGN INT TO INT DO main_body
    (41) repeat_loop -> . REPEAT body UNTIL boolean_expression SEMICOLON
    (42) if_statement -> . IF boolean_expression THEN main_body
    (43) if_statement -> . IF boolean_expression THEN main_body ELSE main_body
    (72) expression -> . expression PLUS expression
    (73) expression -> . expression MINUS expression
    (74) expression -> . expression TIMES expression
    (75) expression -> . expression DIVIDE expression
    (76) expression -> . expression MOD expression
    (77) expression -> . LPAREN expression RPAREN
    (78) expression -> . numeric
    (79) expression -> . function_call
    (58) var_assign -> . ID ASSIGN STR SEMICOLON
    (59) var_assign -> . ID ASSIGN CHAR SEMICOLON
    (60) var_assign -> . ID ASSIGN BOOL SEMICOLON
    (61) var_assign -> . ID ASSIGN expression SEMICOLON
    (62) var_assign -> . ID SEMICOLON
    (26) write -> . WRITE LPAREN STR RPAREN SEMICOLON
    (27) write -> . WRITE LPAREN expression RPAREN SEMICOLON
    (89) empty -> .
    (44) numeric -> . INT
    (45) numeric -> . RE
    (46) numeric -> . ID
    (63) function_call -> . ID LPAREN vars RPAREN

    WHILE           shift and go to state 30
    FOR             shift and go to state 31
    REPEAT          shift and go to state 34
    IF              shift and go to state 35
    LPAREN          shift and go to state 36
    ID              shift and go to state 32
    WRITE           shift and go to state 39
    END             reduce using rule 89 (empty -> .)
    UNTIL           reduce using rule 89 (empty -> .)
    INT             shift and go to state 33
    RE              shift and go to state 40

    write                          shift and go to state 28
    body                           shift and go to state 60
    while_loop                     shift and go to state 22
    for_loop                       shift and go to state 23
    repeat_loop                    shift and go to state 24
    if_statement                   shift and go to state 25
    expression                     shift and go to state 26
    var_assign                     shift and go to state 27
    empty                          shift and go to state 29
    numeric                        shift and go to state 37
    function_call                  shift and go to state 38

state 29

    (35) body -> empty .

    END             reduce using rule 35 (body -> empty .)
    UNTIL           reduce using rule 35 (body -> empty .)


state 30

    (36) while_loop -> WHILE . boolean_expression DO main_body
    (47) boolean_expression -> . expression LESSER expression
    (48) boolean_expression -> . expression LESSER_EQUAL expression
    (49) boolean_expression -> . expression EQUAL expression
    (50) boolean_expression -> . expression GREATER_EQUAL expression
    (51) boolean_expression -> . expression GREATER expression
    (52) boolean_expression -> . NOT boolean_expression
    (53) boolean_expression -> . boolean_expression and_or boolean_expression
    (54) boolean_expression -> . LPAREN boolean_expression RPAREN
    (55) boolean_expression -> . BOOL
    (72) expression -> . expression PLUS expression
    (73) expression -> . expression MINUS expression
    (74) expression -> . expression TIMES expression
    (75) expression -> . expression DIVIDE expression
    (76) expression -> . expression MOD expression
    (77) expression -> . LPAREN expression RPAREN
    (78) expression -> . numeric
    (79) expression -> . function_call
    (44) numeric -> . INT
    (45) numeric -> . RE
    (46) numeric -> . ID
    (63) function_call -> . ID LPAREN vars RPAREN

    NOT             shift and go to state 63
    LPAREN          shift and go to state 64
    BOOL            shift and go to state 65
    INT             shift and go to state 33
    RE              shift and go to state 40
    ID              shift and go to state 66

    boolean_expression             shift and go to state 61
    expression                     shift and go to state 62
    numeric                        shift and go to state 37
    function_call                  shift and go to state 38

state 31

    (37) for_loop -> FOR . ID ASSIGN TO INT DO main_body
    (38) for_loop -> FOR . ID ASSIGN DOWNTO INT DO main_body
    (39) for_loop -> FOR . ID ASSIGN INT DOWNTO INT DO main_body
    (40) for_loop -> FOR . ID ASSIGN INT TO INT DO main_body

    ID              shift and go to state 67


state 32

    (58) var_assign -> ID . ASSIGN STR SEMICOLON
    (59) var_assign -> ID . ASSIGN CHAR SEMICOLON
    (60) var_assign -> ID . ASSIGN BOOL SEMICOLON
    (61) var_assign -> ID . ASSIGN expression SEMICOLON
    (62) var_assign -> ID . SEMICOLON
    (46) numeric -> ID .
    (63) function_call -> ID . LPAREN vars RPAREN

  ! shift/reduce conflict for LPAREN resolved as shift
    ASSIGN          shift and go to state 68
    SEMICOLON       shift and go to state 69
    PLUS            reduce using rule 46 (numeric -> ID .)
    MINUS           reduce using rule 46 (numeric -> ID .)
    TIMES           reduce using rule 46 (numeric -> ID .)
    DIVIDE          reduce using rule 46 (numeric -> ID .)
    MOD             reduce using rule 46 (numeric -> ID .)
    WHILE           reduce using rule 46 (numeric -> ID .)
    FOR             reduce using rule 46 (numeric -> ID .)
    REPEAT          reduce using rule 46 (numeric -> ID .)
    IF              reduce using rule 46 (numeric -> ID .)
    ID              reduce using rule 46 (numeric -> ID .)
    WRITE           reduce using rule 46 (numeric -> ID .)
    INT             reduce using rule 46 (numeric -> ID .)
    RE              reduce using rule 46 (numeric -> ID .)
    END             reduce using rule 46 (numeric -> ID .)
    UNTIL           reduce using rule 46 (numeric -> ID .)
    LPAREN          shift and go to state 70

  ! LPAREN          [ reduce using rule 46 (numeric -> ID .) ]


state 33

    (44) numeric -> INT .

    PLUS            reduce using rule 44 (numeric -> INT .)
    MINUS           reduce using rule 44 (numeric -> INT .)
    TIMES           reduce using rule 44 (numeric -> INT .)
    DIVIDE          reduce using rule 44 (numeric -> INT .)
    MOD             reduce using rule 44 (numeric -> INT .)
    WHILE           reduce using rule 44 (numeric -> INT .)
    FOR             reduce using rule 44 (numeric -> INT .)
    REPEAT          reduce using rule 44 (numeric -> INT .)
    IF              reduce using rule 44 (numeric -> INT .)
    LPAREN          reduce using rule 44 (numeric -> INT .)
    ID              reduce using rule 44 (numeric -> INT .)
    WRITE           reduce using rule 44 (numeric -> INT .)
    INT             reduce using rule 44 (numeric -> INT .)
    RE              reduce using rule 44 (numeric -> INT .)
    END             reduce using rule 44 (numeric -> INT .)
    UNTIL           reduce using rule 44 (numeric -> INT .)
    LESSER          reduce using rule 44 (numeric -> INT .)
    LESSER_EQUAL    reduce using rule 44 (numeric -> INT .)
    EQUAL           reduce using rule 44 (numeric -> INT .)
    GREATER_EQUAL   reduce using rule 44 (numeric -> INT .)
    GREATER         reduce using rule 44 (numeric -> INT .)
    RPAREN          reduce using rule 44 (numeric -> INT .)
    SEMICOLON       reduce using rule 44 (numeric -> INT .)
    COMMA           reduce using rule 44 (numeric -> INT .)
    DO              reduce using rule 44 (numeric -> INT .)
    AND             reduce using rule 44 (numeric -> INT .)
    OR              reduce using rule 44 (numeric -> INT .)
    THEN            reduce using rule 44 (numeric -> INT .)


state 34

    (41) repeat_loop -> REPEAT . body UNTIL boolean_expression SEMICOLON
    (28) body -> . while_loop body
    (29) body -> . for_loop body
    (30) body -> . repeat_loop body
    (31) body -> . if_statement body
    (32) body -> . expression body
    (33) body -> . var_assign body
    (34) body -> . write body
    (35) body -> . empty
    (36) while_loop -> . WHILE boolean_expression DO main_body
    (37) for_loop -> . FOR ID ASSIGN TO INT DO main_body
    (38) for_loop -> . FOR ID ASSIGN DOWNTO INT DO main_body
    (39) for_loop -> . FOR ID ASSIGN INT DOWNTO INT DO main_body
    (40) for_loop -> . FOR ID ASSIGN INT TO INT DO main_body
    (41) repeat_loop -> . REPEAT body UNTIL boolean_expression SEMICOLON
    (42) if_statement -> . IF boolean_expression THEN main_body
    (43) if_statement -> . IF boolean_expression THEN main_body ELSE main_body
    (72) expression -> . expression PLUS expression
    (73) expression -> . expression MINUS expression
    (74) expression -> . expression TIMES expression
    (75) expression -> . expression DIVIDE expression
    (76) expression -> . expression MOD expression
    (77) expression -> . LPAREN expression RPAREN
    (78) expression -> . numeric
    (79) expression -> . function_call
    (58) var_assign -> . ID ASSIGN STR SEMICOLON
    (59) var_assign -> . ID ASSIGN CHAR SEMICOLON
    (60) var_assign -> . ID ASSIGN BOOL SEMICOLON
    (61) var_assign -> . ID ASSIGN expression SEMICOLON
    (62) var_assign -> . ID SEMICOLON
    (26) write -> . WRITE LPAREN STR RPAREN SEMICOLON
    (27) write -> . WRITE LPAREN expression RPAREN SEMICOLON
    (89) empty -> .
    (44) numeric -> . INT
    (45) numeric -> . RE
    (46) numeric -> . ID
    (63) function_call -> . ID LPAREN vars RPAREN

    WHILE           shift and go to state 30
    FOR             shift and go to state 31
    REPEAT          shift and go to state 34
    IF              shift and go to state 35
    LPAREN          shift and go to state 36
    ID              shift and go to state 32
    WRITE           shift and go to state 39
    UNTIL           reduce using rule 89 (empty -> .)
    INT             shift and go to state 33
    RE              shift and go to state 40

    body                           shift and go to state 71
    while_loop                     shift and go to state 22
    for_loop                       shift and go to state 23
    repeat_loop                    shift and go to state 24
    if_statement                   shift and go to state 25
    expression                     shift and go to state 26
    var_assign                     shift and go to state 27
    write                          shift and go to state 28
    empty                          shift and go to state 29
    numeric                        shift and go to state 37
    function_call                  shift and go to state 38

state 35

    (42) if_statement -> IF . boolean_expression THEN main_body
    (43) if_statement -> IF . boolean_expression THEN main_body ELSE main_body
    (47) boolean_expression -> . expression LESSER expression
    (48) boolean_expression -> . expression LESSER_EQUAL expression
    (49) boolean_expression -> . expression EQUAL expression
    (50) boolean_expression -> . expression GREATER_EQUAL expression
    (51) boolean_expression -> . expression GREATER expression
    (52) boolean_expression -> . NOT boolean_expression
    (53) boolean_expression -> . boolean_expression and_or boolean_expression
    (54) boolean_expression -> . LPAREN boolean_expression RPAREN
    (55) boolean_expression -> . BOOL
    (72) expression -> . expression PLUS expression
    (73) expression -> . expression MINUS expression
    (74) expression -> . expression TIMES expression
    (75) expression -> . expression DIVIDE expression
    (76) expression -> . expression MOD expression
    (77) expression -> . LPAREN expression RPAREN
    (78) expression -> . numeric
    (79) expression -> . function_call
    (44) numeric -> . INT
    (45) numeric -> . RE
    (46) numeric -> . ID
    (63) function_call -> . ID LPAREN vars RPAREN

    NOT             shift and go to state 63
    LPAREN          shift and go to state 64
    BOOL            shift and go to state 65
    INT             shift and go to state 33
    RE              shift and go to state 40
    ID              shift and go to state 66

    boolean_expression             shift and go to state 72
    expression                     shift and go to state 62
    numeric                        shift and go to state 37
    function_call                  shift and go to state 38

state 36

    (77) expression -> LPAREN . expression RPAREN
    (72) expression -> . expression PLUS expression
    (73) expression -> . expression MINUS expression
    (74) expression -> . expression TIMES expression
    (75) expression -> . expression DIVIDE expression
    (76) expression -> . expression MOD expression
    (77) expression -> . LPAREN expression RPAREN
    (78) expression -> . numeric
    (79) expression -> . function_call
    (44) numeric -> . INT
    (45) numeric -> . RE
    (46) numeric -> . ID
    (63) function_call -> . ID LPAREN vars RPAREN

    LPAREN          shift and go to state 36
    INT             shift and go to state 33
    RE              shift and go to state 40
    ID              shift and go to state 66

    expression                     shift and go to state 73
    numeric                        shift and go to state 37
    function_call                  shift and go to state 38

state 37

    (78) expression -> numeric .

    PLUS            reduce using rule 78 (expression -> numeric .)
    MINUS           reduce using rule 78 (expression -> numeric .)
    TIMES           reduce using rule 78 (expression -> numeric .)
    DIVIDE          reduce using rule 78 (expression -> numeric .)
    MOD             reduce using rule 78 (expression -> numeric .)
    WHILE           reduce using rule 78 (expression -> numeric .)
    FOR             reduce using rule 78 (expression -> numeric .)
    REPEAT          reduce using rule 78 (expression -> numeric .)
    IF              reduce using rule 78 (expression -> numeric .)
    LPAREN          reduce using rule 78 (expression -> numeric .)
    ID              reduce using rule 78 (expression -> numeric .)
    WRITE           reduce using rule 78 (expression -> numeric .)
    INT             reduce using rule 78 (expression -> numeric .)
    RE              reduce using rule 78 (expression -> numeric .)
    END             reduce using rule 78 (expression -> numeric .)
    UNTIL           reduce using rule 78 (expression -> numeric .)
    LESSER          reduce using rule 78 (expression -> numeric .)
    LESSER_EQUAL    reduce using rule 78 (expression -> numeric .)
    EQUAL           reduce using rule 78 (expression -> numeric .)
    GREATER_EQUAL   reduce using rule 78 (expression -> numeric .)
    GREATER         reduce using rule 78 (expression -> numeric .)
    RPAREN          reduce using rule 78 (expression -> numeric .)
    SEMICOLON       reduce using rule 78 (expression -> numeric .)
    COMMA           reduce using rule 78 (expression -> numeric .)
    DO              reduce using rule 78 (expression -> numeric .)
    AND             reduce using rule 78 (expression -> numeric .)
    OR              reduce using rule 78 (expression -> numeric .)
    THEN            reduce using rule 78 (expression -> numeric .)


state 38

    (79) expression -> function_call .

    PLUS            reduce using rule 79 (expression -> function_call .)
    MINUS           reduce using rule 79 (expression -> function_call .)
    TIMES           reduce using rule 79 (expression -> function_call .)
    DIVIDE          reduce using rule 79 (expression -> function_call .)
    MOD             reduce using rule 79 (expression -> function_call .)
    WHILE           reduce using rule 79 (expression -> function_call .)
    FOR             reduce using rule 79 (expression -> function_call .)
    REPEAT          reduce using rule 79 (expression -> function_call .)
    IF              reduce using rule 79 (expression -> function_call .)
    LPAREN          reduce using rule 79 (expression -> function_call .)
    ID              reduce using rule 79 (expression -> function_call .)
    WRITE           reduce using rule 79 (expression -> function_call .)
    INT             reduce using rule 79 (expression -> function_call .)
    RE              reduce using rule 79 (expression -> function_call .)
    END             reduce using rule 79 (expression -> function_call .)
    UNTIL           reduce using rule 79 (expression -> function_call .)
    LESSER          reduce using rule 79 (expression -> function_call .)
    LESSER_EQUAL    reduce using rule 79 (expression -> function_call .)
    EQUAL           reduce using rule 79 (expression -> function_call .)
    GREATER_EQUAL   reduce using rule 79 (expression -> function_call .)
    GREATER         reduce using rule 79 (expression -> function_call .)
    RPAREN          reduce using rule 79 (expression -> function_call .)
    SEMICOLON       reduce using rule 79 (expression -> function_call .)
    COMMA           reduce using rule 79 (expression -> function_call .)
    DO              reduce using rule 79 (expression -> function_call .)
    AND             reduce using rule 79 (expression -> function_call .)
    OR              reduce using rule 79 (expression -> function_call .)
    THEN            reduce using rule 79 (expression -> function_call .)


state 39

    (26) write -> WRITE . LPAREN STR RPAREN SEMICOLON
    (27) write -> WRITE . LPAREN expression RPAREN SEMICOLON

    LPAREN          shift and go to state 74


state 40

    (45) numeric -> RE .

    PLUS            reduce using rule 45 (numeric -> RE .)
    MINUS           reduce using rule 45 (numeric -> RE .)
    TIMES           reduce using rule 45 (numeric -> RE .)
    DIVIDE          reduce using rule 45 (numeric -> RE .)
    MOD             reduce using rule 45 (numeric -> RE .)
    WHILE           reduce using rule 45 (numeric -> RE .)
    FOR             reduce using rule 45 (numeric -> RE .)
    REPEAT          reduce using rule 45 (numeric -> RE .)
    IF              reduce using rule 45 (numeric -> RE .)
    LPAREN          reduce using rule 45 (numeric -> RE .)
    ID              reduce using rule 45 (numeric -> RE .)
    WRITE           reduce using rule 45 (numeric -> RE .)
    INT             reduce using rule 45 (numeric -> RE .)
    RE              reduce using rule 45 (numeric -> RE .)
    END             reduce using rule 45 (numeric -> RE .)
    UNTIL           reduce using rule 45 (numeric -> RE .)
    LESSER          reduce using rule 45 (numeric -> RE .)
    LESSER_EQUAL    reduce using rule 45 (numeric -> RE .)
    EQUAL           reduce using rule 45 (numeric -> RE .)
    GREATER_EQUAL   reduce using rule 45 (numeric -> RE .)
    GREATER         reduce using rule 45 (numeric -> RE .)
    RPAREN          reduce using rule 45 (numeric -> RE .)
    SEMICOLON       reduce using rule 45 (numeric -> RE .)
    COMMA           reduce using rule 45 (numeric -> RE .)
    DO              reduce using rule 45 (numeric -> RE .)
    AND             reduce using rule 45 (numeric -> RE .)
    OR              reduce using rule 45 (numeric -> RE .)
    THEN            reduce using rule 45 (numeric -> RE .)


state 41

    (2) functions -> FUNCTION ID LPAREN . function_variables RPAREN COLON INTEGER SEMICOLON variable_block main_body functions
    (3) functions -> FUNCTION ID LPAREN . function_variables RPAREN COLON REAL SEMICOLON variable_block main_body functions
    (4) functions -> FUNCTION ID LPAREN . function_variables RPAREN COLON BOOLEAN SEMICOLON variable_block main_body functions
    (5) functions -> FUNCTION ID LPAREN . function_variables RPAREN COLON STRING SEMICOLON variable_block main_body functions
    (6) functions -> FUNCTION ID LPAREN . function_variables RPAREN COLON CHARACTER SEMICOLON variable_block main_body functions
    (9) function_variables -> . ID COLON INTEGER
    (10) function_variables -> . ID COLON REAL
    (11) function_variables -> . ID COLON BOOLEAN
    (12) function_variables -> . ID COLON STRING
    (13) function_variables -> . ID COLON CHARACTER
    (14) function_variables -> . ID COLON INTEGER COMMA function_variables
    (15) function_variables -> . ID COLON REAL COMMA function_variables
    (16) function_variables -> . ID COLON BOOLEAN COMMA function_variables
    (17) function_variables -> . ID COLON STRING COMMA function_variables
    (18) function_variables -> . ID COLON CHARACTER COMMA function_variables
    (19) function_variables -> . ID COLON INTEGER SEMICOLON function_variables
    (20) function_variables -> . ID COLON REAL SEMICOLON function_variables
    (21) function_variables -> . ID COLON BOOLEAN SEMICOLON function_variables
    (22) function_variables -> . ID COLON STRING SEMICOLON function_variables
    (23) function_variables -> . ID COLON CHARACTER SEMICOLON function_variables
    (24) function_variables -> . empty
    (89) empty -> .

    ID              shift and go to state 75
    RPAREN          reduce using rule 89 (empty -> .)

    function_variables             shift and go to state 76
    empty                          shift and go to state 77

state 42

    (7) functions -> PROCEDURE ID SEMICOLON . variable_block main_body functions
    (80) variable_block -> . empty
    (81) variable_block -> . VAR variables
    (89) empty -> .

    VAR             shift and go to state 7
    BEGIN           reduce using rule 89 (empty -> .)

    variable_block                 shift and go to state 78
    empty                          shift and go to state 6

state 43

    (84) variable_describe -> ID COLON STRING . SEMICOLON

    SEMICOLON       shift and go to state 79


state 44

    (85) variable_describe -> ID COLON INTEGER . SEMICOLON

    SEMICOLON       shift and go to state 80


state 45

    (86) variable_describe -> ID COLON CHARACTER . SEMICOLON

    SEMICOLON       shift and go to state 81


state 46

    (87) variable_describe -> ID COLON BOOLEAN . SEMICOLON

    SEMICOLON       shift and go to state 82


state 47

    (88) variable_describe -> ID COLON REAL . SEMICOLON

    SEMICOLON       shift and go to state 83


state 48

    (25) main_body -> BEGIN body END .

    $end            reduce using rule 25 (main_body -> BEGIN body END .)
    FUNCTION        reduce using rule 25 (main_body -> BEGIN body END .)
    PROCEDURE       reduce using rule 25 (main_body -> BEGIN body END .)
    BEGIN           reduce using rule 25 (main_body -> BEGIN body END .)
    WHILE           reduce using rule 25 (main_body -> BEGIN body END .)
    FOR             reduce using rule 25 (main_body -> BEGIN body END .)
    REPEAT          reduce using rule 25 (main_body -> BEGIN body END .)
    IF              reduce using rule 25 (main_body -> BEGIN body END .)
    LPAREN          reduce using rule 25 (main_body -> BEGIN body END .)
    ID              reduce using rule 25 (main_body -> BEGIN body END .)
    WRITE           reduce using rule 25 (main_body -> BEGIN body END .)
    INT             reduce using rule 25 (main_body -> BEGIN body END .)
    RE              reduce using rule 25 (main_body -> BEGIN body END .)
    END             reduce using rule 25 (main_body -> BEGIN body END .)
    UNTIL           reduce using rule 25 (main_body -> BEGIN body END .)
    ELSE            reduce using rule 25 (main_body -> BEGIN body END .)


state 49

    (28) body -> while_loop body .

    END             reduce using rule 28 (body -> while_loop body .)
    UNTIL           reduce using rule 28 (body -> while_loop body .)


state 50

    (29) body -> for_loop body .

    END             reduce using rule 29 (body -> for_loop body .)
    UNTIL           reduce using rule 29 (body -> for_loop body .)


state 51

    (30) body -> repeat_loop body .

    END             reduce using rule 30 (body -> repeat_loop body .)
    UNTIL           reduce using rule 30 (body -> repeat_loop body .)


state 52

    (31) body -> if_statement body .

    END             reduce using rule 31 (body -> if_statement body .)
    UNTIL           reduce using rule 31 (body -> if_statement body .)


state 53

    (32) body -> expression body .

    END             reduce using rule 32 (body -> expression body .)
    UNTIL           reduce using rule 32 (body -> expression body .)


state 54

    (72) expression -> expression PLUS . expression
    (72) expression -> . expression PLUS expression
    (73) expression -> . expression MINUS expression
    (74) expression -> . expression TIMES expression
    (75) expression -> . expression DIVIDE expression
    (76) expression -> . expression MOD expression
    (77) expression -> . LPAREN expression RPAREN
    (78) expression -> . numeric
    (79) expression -> . function_call
    (44) numeric -> . INT
    (45) numeric -> . RE
    (46) numeric -> . ID
    (63) function_call -> . ID LPAREN vars RPAREN

    LPAREN          shift and go to state 36
    INT             shift and go to state 33
    RE              shift and go to state 40
    ID              shift and go to state 66

    expression                     shift and go to state 84
    numeric                        shift and go to state 37
    function_call                  shift and go to state 38

state 55

    (73) expression -> expression MINUS . expression
    (72) expression -> . expression PLUS expression
    (73) expression -> . expression MINUS expression
    (74) expression -> . expression TIMES expression
    (75) expression -> . expression DIVIDE expression
    (76) expression -> . expression MOD expression
    (77) expression -> . LPAREN expression RPAREN
    (78) expression -> . numeric
    (79) expression -> . function_call
    (44) numeric -> . INT
    (45) numeric -> . RE
    (46) numeric -> . ID
    (63) function_call -> . ID LPAREN vars RPAREN

    LPAREN          shift and go to state 36
    INT             shift and go to state 33
    RE              shift and go to state 40
    ID              shift and go to state 66

    expression                     shift and go to state 85
    numeric                        shift and go to state 37
    function_call                  shift and go to state 38

state 56

    (74) expression -> expression TIMES . expression
    (72) expression -> . expression PLUS expression
    (73) expression -> . expression MINUS expression
    (74) expression -> . expression TIMES expression
    (75) expression -> . expression DIVIDE expression
    (76) expression -> . expression MOD expression
    (77) expression -> . LPAREN expression RPAREN
    (78) expression -> . numeric
    (79) expression -> . function_call
    (44) numeric -> . INT
    (45) numeric -> . RE
    (46) numeric -> . ID
    (63) function_call -> . ID LPAREN vars RPAREN

    LPAREN          shift and go to state 36
    INT             shift and go to state 33
    RE              shift and go to state 40
    ID              shift and go to state 66

    expression                     shift and go to state 86
    numeric                        shift and go to state 37
    function_call                  shift and go to state 38

state 57

    (75) expression -> expression DIVIDE . expression
    (72) expression -> . expression PLUS expression
    (73) expression -> . expression MINUS expression
    (74) expression -> . expression TIMES expression
    (75) expression -> . expression DIVIDE expression
    (76) expression -> . expression MOD expression
    (77) expression -> . LPAREN expression RPAREN
    (78) expression -> . numeric
    (79) expression -> . function_call
    (44) numeric -> . INT
    (45) numeric -> . RE
    (46) numeric -> . ID
    (63) function_call -> . ID LPAREN vars RPAREN

    LPAREN          shift and go to state 36
    INT             shift and go to state 33
    RE              shift and go to state 40
    ID              shift and go to state 66

    expression                     shift and go to state 87
    numeric                        shift and go to state 37
    function_call                  shift and go to state 38

state 58

    (76) expression -> expression MOD . expression
    (72) expression -> . expression PLUS expression
    (73) expression -> . expression MINUS expression
    (74) expression -> . expression TIMES expression
    (75) expression -> . expression DIVIDE expression
    (76) expression -> . expression MOD expression
    (77) expression -> . LPAREN expression RPAREN
    (78) expression -> . numeric
    (79) expression -> . function_call
    (44) numeric -> . INT
    (45) numeric -> . RE
    (46) numeric -> . ID
    (63) function_call -> . ID LPAREN vars RPAREN

    LPAREN          shift and go to state 36
    INT             shift and go to state 33
    RE              shift and go to state 40
    ID              shift and go to state 66

    expression                     shift and go to state 88
    numeric                        shift and go to state 37
    function_call                  shift and go to state 38

state 59

    (33) body -> var_assign body .

    END             reduce using rule 33 (body -> var_assign body .)
    UNTIL           reduce using rule 33 (body -> var_assign body .)


state 60

    (34) body -> write body .

    END             reduce using rule 34 (body -> write body .)
    UNTIL           reduce using rule 34 (body -> write body .)


state 61

    (36) while_loop -> WHILE boolean_expression . DO main_body
    (53) boolean_expression -> boolean_expression . and_or boolean_expression
    (56) and_or -> . AND
    (57) and_or -> . OR

    DO              shift and go to state 89
    AND             shift and go to state 91
    OR              shift and go to state 92

    and_or                         shift and go to state 90

state 62

    (47) boolean_expression -> expression . LESSER expression
    (48) boolean_expression -> expression . LESSER_EQUAL expression
    (49) boolean_expression -> expression . EQUAL expression
    (50) boolean_expression -> expression . GREATER_EQUAL expression
    (51) boolean_expression -> expression . GREATER expression
    (72) expression -> expression . PLUS expression
    (73) expression -> expression . MINUS expression
    (74) expression -> expression . TIMES expression
    (75) expression -> expression . DIVIDE expression
    (76) expression -> expression . MOD expression

    LESSER          shift and go to state 93
    LESSER_EQUAL    shift and go to state 94
    EQUAL           shift and go to state 95
    GREATER_EQUAL   shift and go to state 96
    GREATER         shift and go to state 97
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    TIMES           shift and go to state 56
    DIVIDE          shift and go to state 57
    MOD             shift and go to state 58


state 63

    (52) boolean_expression -> NOT . boolean_expression
    (47) boolean_expression -> . expression LESSER expression
    (48) boolean_expression -> . expression LESSER_EQUAL expression
    (49) boolean_expression -> . expression EQUAL expression
    (50) boolean_expression -> . expression GREATER_EQUAL expression
    (51) boolean_expression -> . expression GREATER expression
    (52) boolean_expression -> . NOT boolean_expression
    (53) boolean_expression -> . boolean_expression and_or boolean_expression
    (54) boolean_expression -> . LPAREN boolean_expression RPAREN
    (55) boolean_expression -> . BOOL
    (72) expression -> . expression PLUS expression
    (73) expression -> . expression MINUS expression
    (74) expression -> . expression TIMES expression
    (75) expression -> . expression DIVIDE expression
    (76) expression -> . expression MOD expression
    (77) expression -> . LPAREN expression RPAREN
    (78) expression -> . numeric
    (79) expression -> . function_call
    (44) numeric -> . INT
    (45) numeric -> . RE
    (46) numeric -> . ID
    (63) function_call -> . ID LPAREN vars RPAREN

    NOT             shift and go to state 63
    LPAREN          shift and go to state 64
    BOOL            shift and go to state 65
    INT             shift and go to state 33
    RE              shift and go to state 40
    ID              shift and go to state 66

    boolean_expression             shift and go to state 98
    expression                     shift and go to state 62
    numeric                        shift and go to state 37
    function_call                  shift and go to state 38

state 64

    (54) boolean_expression -> LPAREN . boolean_expression RPAREN
    (77) expression -> LPAREN . expression RPAREN
    (47) boolean_expression -> . expression LESSER expression
    (48) boolean_expression -> . expression LESSER_EQUAL expression
    (49) boolean_expression -> . expression EQUAL expression
    (50) boolean_expression -> . expression GREATER_EQUAL expression
    (51) boolean_expression -> . expression GREATER expression
    (52) boolean_expression -> . NOT boolean_expression
    (53) boolean_expression -> . boolean_expression and_or boolean_expression
    (54) boolean_expression -> . LPAREN boolean_expression RPAREN
    (55) boolean_expression -> . BOOL
    (72) expression -> . expression PLUS expression
    (73) expression -> . expression MINUS expression
    (74) expression -> . expression TIMES expression
    (75) expression -> . expression DIVIDE expression
    (76) expression -> . expression MOD expression
    (77) expression -> . LPAREN expression RPAREN
    (78) expression -> . numeric
    (79) expression -> . function_call
    (44) numeric -> . INT
    (45) numeric -> . RE
    (46) numeric -> . ID
    (63) function_call -> . ID LPAREN vars RPAREN

    NOT             shift and go to state 63
    LPAREN          shift and go to state 64
    BOOL            shift and go to state 65
    INT             shift and go to state 33
    RE              shift and go to state 40
    ID              shift and go to state 66

    boolean_expression             shift and go to state 99
    expression                     shift and go to state 100
    numeric                        shift and go to state 37
    function_call                  shift and go to state 38

state 65

    (55) boolean_expression -> BOOL .

    DO              reduce using rule 55 (boolean_expression -> BOOL .)
    AND             reduce using rule 55 (boolean_expression -> BOOL .)
    OR              reduce using rule 55 (boolean_expression -> BOOL .)
    THEN            reduce using rule 55 (boolean_expression -> BOOL .)
    RPAREN          reduce using rule 55 (boolean_expression -> BOOL .)
    SEMICOLON       reduce using rule 55 (boolean_expression -> BOOL .)


state 66

    (46) numeric -> ID .
    (63) function_call -> ID . LPAREN vars RPAREN

  ! shift/reduce conflict for LPAREN resolved as shift
    LESSER          reduce using rule 46 (numeric -> ID .)
    LESSER_EQUAL    reduce using rule 46 (numeric -> ID .)
    EQUAL           reduce using rule 46 (numeric -> ID .)
    GREATER_EQUAL   reduce using rule 46 (numeric -> ID .)
    GREATER         reduce using rule 46 (numeric -> ID .)
    PLUS            reduce using rule 46 (numeric -> ID .)
    MINUS           reduce using rule 46 (numeric -> ID .)
    TIMES           reduce using rule 46 (numeric -> ID .)
    DIVIDE          reduce using rule 46 (numeric -> ID .)
    MOD             reduce using rule 46 (numeric -> ID .)
    RPAREN          reduce using rule 46 (numeric -> ID .)
    WHILE           reduce using rule 46 (numeric -> ID .)
    FOR             reduce using rule 46 (numeric -> ID .)
    REPEAT          reduce using rule 46 (numeric -> ID .)
    IF              reduce using rule 46 (numeric -> ID .)
    ID              reduce using rule 46 (numeric -> ID .)
    WRITE           reduce using rule 46 (numeric -> ID .)
    INT             reduce using rule 46 (numeric -> ID .)
    RE              reduce using rule 46 (numeric -> ID .)
    END             reduce using rule 46 (numeric -> ID .)
    UNTIL           reduce using rule 46 (numeric -> ID .)
    SEMICOLON       reduce using rule 46 (numeric -> ID .)
    COMMA           reduce using rule 46 (numeric -> ID .)
    DO              reduce using rule 46 (numeric -> ID .)
    AND             reduce using rule 46 (numeric -> ID .)
    OR              reduce using rule 46 (numeric -> ID .)
    THEN            reduce using rule 46 (numeric -> ID .)
    LPAREN          shift and go to state 70

  ! LPAREN          [ reduce using rule 46 (numeric -> ID .) ]


state 67

    (37) for_loop -> FOR ID . ASSIGN TO INT DO main_body
    (38) for_loop -> FOR ID . ASSIGN DOWNTO INT DO main_body
    (39) for_loop -> FOR ID . ASSIGN INT DOWNTO INT DO main_body
    (40) for_loop -> FOR ID . ASSIGN INT TO INT DO main_body

    ASSIGN          shift and go to state 101


state 68

    (58) var_assign -> ID ASSIGN . STR SEMICOLON
    (59) var_assign -> ID ASSIGN . CHAR SEMICOLON
    (60) var_assign -> ID ASSIGN . BOOL SEMICOLON
    (61) var_assign -> ID ASSIGN . expression SEMICOLON
    (72) expression -> . expression PLUS expression
    (73) expression -> . expression MINUS expression
    (74) expression -> . expression TIMES expression
    (75) expression -> . expression DIVIDE expression
    (76) expression -> . expression MOD expression
    (77) expression -> . LPAREN expression RPAREN
    (78) expression -> . numeric
    (79) expression -> . function_call
    (44) numeric -> . INT
    (45) numeric -> . RE
    (46) numeric -> . ID
    (63) function_call -> . ID LPAREN vars RPAREN

    STR             shift and go to state 102
    CHAR            shift and go to state 103
    BOOL            shift and go to state 104
    LPAREN          shift and go to state 36
    INT             shift and go to state 33
    RE              shift and go to state 40
    ID              shift and go to state 66

    expression                     shift and go to state 105
    numeric                        shift and go to state 37
    function_call                  shift and go to state 38

state 69

    (62) var_assign -> ID SEMICOLON .

    WHILE           reduce using rule 62 (var_assign -> ID SEMICOLON .)
    FOR             reduce using rule 62 (var_assign -> ID SEMICOLON .)
    REPEAT          reduce using rule 62 (var_assign -> ID SEMICOLON .)
    IF              reduce using rule 62 (var_assign -> ID SEMICOLON .)
    LPAREN          reduce using rule 62 (var_assign -> ID SEMICOLON .)
    ID              reduce using rule 62 (var_assign -> ID SEMICOLON .)
    WRITE           reduce using rule 62 (var_assign -> ID SEMICOLON .)
    INT             reduce using rule 62 (var_assign -> ID SEMICOLON .)
    RE              reduce using rule 62 (var_assign -> ID SEMICOLON .)
    END             reduce using rule 62 (var_assign -> ID SEMICOLON .)
    UNTIL           reduce using rule 62 (var_assign -> ID SEMICOLON .)


state 70

    (63) function_call -> ID LPAREN . vars RPAREN
    (64) vars -> . STR COMMA vars
    (65) vars -> . BOOL COMMA vars
    (66) vars -> . CHAR COMMA vars
    (67) vars -> . expression COMMA vars
    (68) vars -> . expression
    (69) vars -> . STR
    (70) vars -> . BOOL
    (71) vars -> . CHAR
    (72) expression -> . expression PLUS expression
    (73) expression -> . expression MINUS expression
    (74) expression -> . expression TIMES expression
    (75) expression -> . expression DIVIDE expression
    (76) expression -> . expression MOD expression
    (77) expression -> . LPAREN expression RPAREN
    (78) expression -> . numeric
    (79) expression -> . function_call
    (44) numeric -> . INT
    (45) numeric -> . RE
    (46) numeric -> . ID
    (63) function_call -> . ID LPAREN vars RPAREN

    STR             shift and go to state 107
    BOOL            shift and go to state 108
    CHAR            shift and go to state 109
    LPAREN          shift and go to state 36
    INT             shift and go to state 33
    RE              shift and go to state 40
    ID              shift and go to state 66

    vars                           shift and go to state 106
    expression                     shift and go to state 110
    numeric                        shift and go to state 37
    function_call                  shift and go to state 38

state 71

    (41) repeat_loop -> REPEAT body . UNTIL boolean_expression SEMICOLON

    UNTIL           shift and go to state 111


state 72

    (42) if_statement -> IF boolean_expression . THEN main_body
    (43) if_statement -> IF boolean_expression . THEN main_body ELSE main_body
    (53) boolean_expression -> boolean_expression . and_or boolean_expression
    (56) and_or -> . AND
    (57) and_or -> . OR

    THEN            shift and go to state 112
    AND             shift and go to state 91
    OR              shift and go to state 92

    and_or                         shift and go to state 90

state 73

    (77) expression -> LPAREN expression . RPAREN
    (72) expression -> expression . PLUS expression
    (73) expression -> expression . MINUS expression
    (74) expression -> expression . TIMES expression
    (75) expression -> expression . DIVIDE expression
    (76) expression -> expression . MOD expression

    RPAREN          shift and go to state 113
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    TIMES           shift and go to state 56
    DIVIDE          shift and go to state 57
    MOD             shift and go to state 58


state 74

    (26) write -> WRITE LPAREN . STR RPAREN SEMICOLON
    (27) write -> WRITE LPAREN . expression RPAREN SEMICOLON
    (72) expression -> . expression PLUS expression
    (73) expression -> . expression MINUS expression
    (74) expression -> . expression TIMES expression
    (75) expression -> . expression DIVIDE expression
    (76) expression -> . expression MOD expression
    (77) expression -> . LPAREN expression RPAREN
    (78) expression -> . numeric
    (79) expression -> . function_call
    (44) numeric -> . INT
    (45) numeric -> . RE
    (46) numeric -> . ID
    (63) function_call -> . ID LPAREN vars RPAREN

    STR             shift and go to state 114
    LPAREN          shift and go to state 36
    INT             shift and go to state 33
    RE              shift and go to state 40
    ID              shift and go to state 66

    expression                     shift and go to state 115
    numeric                        shift and go to state 37
    function_call                  shift and go to state 38

state 75

    (9) function_variables -> ID . COLON INTEGER
    (10) function_variables -> ID . COLON REAL
    (11) function_variables -> ID . COLON BOOLEAN
    (12) function_variables -> ID . COLON STRING
    (13) function_variables -> ID . COLON CHARACTER
    (14) function_variables -> ID . COLON INTEGER COMMA function_variables
    (15) function_variables -> ID . COLON REAL COMMA function_variables
    (16) function_variables -> ID . COLON BOOLEAN COMMA function_variables
    (17) function_variables -> ID . COLON STRING COMMA function_variables
    (18) function_variables -> ID . COLON CHARACTER COMMA function_variables
    (19) function_variables -> ID . COLON INTEGER SEMICOLON function_variables
    (20) function_variables -> ID . COLON REAL SEMICOLON function_variables
    (21) function_variables -> ID . COLON BOOLEAN SEMICOLON function_variables
    (22) function_variables -> ID . COLON STRING SEMICOLON function_variables
    (23) function_variables -> ID . COLON CHARACTER SEMICOLON function_variables

    COLON           shift and go to state 116


state 76

    (2) functions -> FUNCTION ID LPAREN function_variables . RPAREN COLON INTEGER SEMICOLON variable_block main_body functions
    (3) functions -> FUNCTION ID LPAREN function_variables . RPAREN COLON REAL SEMICOLON variable_block main_body functions
    (4) functions -> FUNCTION ID LPAREN function_variables . RPAREN COLON BOOLEAN SEMICOLON variable_block main_body functions
    (5) functions -> FUNCTION ID LPAREN function_variables . RPAREN COLON STRING SEMICOLON variable_block main_body functions
    (6) functions -> FUNCTION ID LPAREN function_variables . RPAREN COLON CHARACTER SEMICOLON variable_block main_body functions

    RPAREN          shift and go to state 117


state 77

    (24) function_variables -> empty .

    RPAREN          reduce using rule 24 (function_variables -> empty .)


state 78

    (7) functions -> PROCEDURE ID SEMICOLON variable_block . main_body functions
    (25) main_body -> . BEGIN body END

    BEGIN           shift and go to state 16

    main_body                      shift and go to state 118

state 79

    (84) variable_describe -> ID COLON STRING SEMICOLON .

    ID              reduce using rule 84 (variable_describe -> ID COLON STRING SEMICOLON .)
    FUNCTION        reduce using rule 84 (variable_describe -> ID COLON STRING SEMICOLON .)
    PROCEDURE       reduce using rule 84 (variable_describe -> ID COLON STRING SEMICOLON .)
    BEGIN           reduce using rule 84 (variable_describe -> ID COLON STRING SEMICOLON .)


state 80

    (85) variable_describe -> ID COLON INTEGER SEMICOLON .

    ID              reduce using rule 85 (variable_describe -> ID COLON INTEGER SEMICOLON .)
    FUNCTION        reduce using rule 85 (variable_describe -> ID COLON INTEGER SEMICOLON .)
    PROCEDURE       reduce using rule 85 (variable_describe -> ID COLON INTEGER SEMICOLON .)
    BEGIN           reduce using rule 85 (variable_describe -> ID COLON INTEGER SEMICOLON .)


state 81

    (86) variable_describe -> ID COLON CHARACTER SEMICOLON .

    ID              reduce using rule 86 (variable_describe -> ID COLON CHARACTER SEMICOLON .)
    FUNCTION        reduce using rule 86 (variable_describe -> ID COLON CHARACTER SEMICOLON .)
    PROCEDURE       reduce using rule 86 (variable_describe -> ID COLON CHARACTER SEMICOLON .)
    BEGIN           reduce using rule 86 (variable_describe -> ID COLON CHARACTER SEMICOLON .)


state 82

    (87) variable_describe -> ID COLON BOOLEAN SEMICOLON .

    ID              reduce using rule 87 (variable_describe -> ID COLON BOOLEAN SEMICOLON .)
    FUNCTION        reduce using rule 87 (variable_describe -> ID COLON BOOLEAN SEMICOLON .)
    PROCEDURE       reduce using rule 87 (variable_describe -> ID COLON BOOLEAN SEMICOLON .)
    BEGIN           reduce using rule 87 (variable_describe -> ID COLON BOOLEAN SEMICOLON .)


state 83

    (88) variable_describe -> ID COLON REAL SEMICOLON .

    ID              reduce using rule 88 (variable_describe -> ID COLON REAL SEMICOLON .)
    FUNCTION        reduce using rule 88 (variable_describe -> ID COLON REAL SEMICOLON .)
    PROCEDURE       reduce using rule 88 (variable_describe -> ID COLON REAL SEMICOLON .)
    BEGIN           reduce using rule 88 (variable_describe -> ID COLON REAL SEMICOLON .)


state 84

    (72) expression -> expression PLUS expression .
    (72) expression -> expression . PLUS expression
    (73) expression -> expression . MINUS expression
    (74) expression -> expression . TIMES expression
    (75) expression -> expression . DIVIDE expression
    (76) expression -> expression . MOD expression

    PLUS            reduce using rule 72 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 72 (expression -> expression PLUS expression .)
    MOD             reduce using rule 72 (expression -> expression PLUS expression .)
    WHILE           reduce using rule 72 (expression -> expression PLUS expression .)
    FOR             reduce using rule 72 (expression -> expression PLUS expression .)
    REPEAT          reduce using rule 72 (expression -> expression PLUS expression .)
    IF              reduce using rule 72 (expression -> expression PLUS expression .)
    LPAREN          reduce using rule 72 (expression -> expression PLUS expression .)
    ID              reduce using rule 72 (expression -> expression PLUS expression .)
    WRITE           reduce using rule 72 (expression -> expression PLUS expression .)
    INT             reduce using rule 72 (expression -> expression PLUS expression .)
    RE              reduce using rule 72 (expression -> expression PLUS expression .)
    END             reduce using rule 72 (expression -> expression PLUS expression .)
    UNTIL           reduce using rule 72 (expression -> expression PLUS expression .)
    LESSER          reduce using rule 72 (expression -> expression PLUS expression .)
    LESSER_EQUAL    reduce using rule 72 (expression -> expression PLUS expression .)
    EQUAL           reduce using rule 72 (expression -> expression PLUS expression .)
    GREATER_EQUAL   reduce using rule 72 (expression -> expression PLUS expression .)
    GREATER         reduce using rule 72 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 72 (expression -> expression PLUS expression .)
    SEMICOLON       reduce using rule 72 (expression -> expression PLUS expression .)
    COMMA           reduce using rule 72 (expression -> expression PLUS expression .)
    DO              reduce using rule 72 (expression -> expression PLUS expression .)
    AND             reduce using rule 72 (expression -> expression PLUS expression .)
    OR              reduce using rule 72 (expression -> expression PLUS expression .)
    THEN            reduce using rule 72 (expression -> expression PLUS expression .)
    TIMES           shift and go to state 56
    DIVIDE          shift and go to state 57

  ! TIMES           [ reduce using rule 72 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 72 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 54 ]
  ! MINUS           [ shift and go to state 55 ]
  ! MOD             [ shift and go to state 58 ]


state 85

    (73) expression -> expression MINUS expression .
    (72) expression -> expression . PLUS expression
    (73) expression -> expression . MINUS expression
    (74) expression -> expression . TIMES expression
    (75) expression -> expression . DIVIDE expression
    (76) expression -> expression . MOD expression

    PLUS            reduce using rule 73 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 73 (expression -> expression MINUS expression .)
    MOD             reduce using rule 73 (expression -> expression MINUS expression .)
    WHILE           reduce using rule 73 (expression -> expression MINUS expression .)
    FOR             reduce using rule 73 (expression -> expression MINUS expression .)
    REPEAT          reduce using rule 73 (expression -> expression MINUS expression .)
    IF              reduce using rule 73 (expression -> expression MINUS expression .)
    LPAREN          reduce using rule 73 (expression -> expression MINUS expression .)
    ID              reduce using rule 73 (expression -> expression MINUS expression .)
    WRITE           reduce using rule 73 (expression -> expression MINUS expression .)
    INT             reduce using rule 73 (expression -> expression MINUS expression .)
    RE              reduce using rule 73 (expression -> expression MINUS expression .)
    END             reduce using rule 73 (expression -> expression MINUS expression .)
    UNTIL           reduce using rule 73 (expression -> expression MINUS expression .)
    LESSER          reduce using rule 73 (expression -> expression MINUS expression .)
    LESSER_EQUAL    reduce using rule 73 (expression -> expression MINUS expression .)
    EQUAL           reduce using rule 73 (expression -> expression MINUS expression .)
    GREATER_EQUAL   reduce using rule 73 (expression -> expression MINUS expression .)
    GREATER         reduce using rule 73 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 73 (expression -> expression MINUS expression .)
    SEMICOLON       reduce using rule 73 (expression -> expression MINUS expression .)
    COMMA           reduce using rule 73 (expression -> expression MINUS expression .)
    DO              reduce using rule 73 (expression -> expression MINUS expression .)
    AND             reduce using rule 73 (expression -> expression MINUS expression .)
    OR              reduce using rule 73 (expression -> expression MINUS expression .)
    THEN            reduce using rule 73 (expression -> expression MINUS expression .)
    TIMES           shift and go to state 56
    DIVIDE          shift and go to state 57

  ! TIMES           [ reduce using rule 73 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 73 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 54 ]
  ! MINUS           [ shift and go to state 55 ]
  ! MOD             [ shift and go to state 58 ]


state 86

    (74) expression -> expression TIMES expression .
    (72) expression -> expression . PLUS expression
    (73) expression -> expression . MINUS expression
    (74) expression -> expression . TIMES expression
    (75) expression -> expression . DIVIDE expression
    (76) expression -> expression . MOD expression

    PLUS            reduce using rule 74 (expression -> expression TIMES expression .)
    MINUS           reduce using rule 74 (expression -> expression TIMES expression .)
    TIMES           reduce using rule 74 (expression -> expression TIMES expression .)
    DIVIDE          reduce using rule 74 (expression -> expression TIMES expression .)
    MOD             reduce using rule 74 (expression -> expression TIMES expression .)
    WHILE           reduce using rule 74 (expression -> expression TIMES expression .)
    FOR             reduce using rule 74 (expression -> expression TIMES expression .)
    REPEAT          reduce using rule 74 (expression -> expression TIMES expression .)
    IF              reduce using rule 74 (expression -> expression TIMES expression .)
    LPAREN          reduce using rule 74 (expression -> expression TIMES expression .)
    ID              reduce using rule 74 (expression -> expression TIMES expression .)
    WRITE           reduce using rule 74 (expression -> expression TIMES expression .)
    INT             reduce using rule 74 (expression -> expression TIMES expression .)
    RE              reduce using rule 74 (expression -> expression TIMES expression .)
    END             reduce using rule 74 (expression -> expression TIMES expression .)
    UNTIL           reduce using rule 74 (expression -> expression TIMES expression .)
    LESSER          reduce using rule 74 (expression -> expression TIMES expression .)
    LESSER_EQUAL    reduce using rule 74 (expression -> expression TIMES expression .)
    EQUAL           reduce using rule 74 (expression -> expression TIMES expression .)
    GREATER_EQUAL   reduce using rule 74 (expression -> expression TIMES expression .)
    GREATER         reduce using rule 74 (expression -> expression TIMES expression .)
    RPAREN          reduce using rule 74 (expression -> expression TIMES expression .)
    SEMICOLON       reduce using rule 74 (expression -> expression TIMES expression .)
    COMMA           reduce using rule 74 (expression -> expression TIMES expression .)
    DO              reduce using rule 74 (expression -> expression TIMES expression .)
    AND             reduce using rule 74 (expression -> expression TIMES expression .)
    OR              reduce using rule 74 (expression -> expression TIMES expression .)
    THEN            reduce using rule 74 (expression -> expression TIMES expression .)

  ! PLUS            [ shift and go to state 54 ]
  ! MINUS           [ shift and go to state 55 ]
  ! TIMES           [ shift and go to state 56 ]
  ! DIVIDE          [ shift and go to state 57 ]
  ! MOD             [ shift and go to state 58 ]


state 87

    (75) expression -> expression DIVIDE expression .
    (72) expression -> expression . PLUS expression
    (73) expression -> expression . MINUS expression
    (74) expression -> expression . TIMES expression
    (75) expression -> expression . DIVIDE expression
    (76) expression -> expression . MOD expression

    PLUS            reduce using rule 75 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 75 (expression -> expression DIVIDE expression .)
    TIMES           reduce using rule 75 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 75 (expression -> expression DIVIDE expression .)
    MOD             reduce using rule 75 (expression -> expression DIVIDE expression .)
    WHILE           reduce using rule 75 (expression -> expression DIVIDE expression .)
    FOR             reduce using rule 75 (expression -> expression DIVIDE expression .)
    REPEAT          reduce using rule 75 (expression -> expression DIVIDE expression .)
    IF              reduce using rule 75 (expression -> expression DIVIDE expression .)
    LPAREN          reduce using rule 75 (expression -> expression DIVIDE expression .)
    ID              reduce using rule 75 (expression -> expression DIVIDE expression .)
    WRITE           reduce using rule 75 (expression -> expression DIVIDE expression .)
    INT             reduce using rule 75 (expression -> expression DIVIDE expression .)
    RE              reduce using rule 75 (expression -> expression DIVIDE expression .)
    END             reduce using rule 75 (expression -> expression DIVIDE expression .)
    UNTIL           reduce using rule 75 (expression -> expression DIVIDE expression .)
    LESSER          reduce using rule 75 (expression -> expression DIVIDE expression .)
    LESSER_EQUAL    reduce using rule 75 (expression -> expression DIVIDE expression .)
    EQUAL           reduce using rule 75 (expression -> expression DIVIDE expression .)
    GREATER_EQUAL   reduce using rule 75 (expression -> expression DIVIDE expression .)
    GREATER         reduce using rule 75 (expression -> expression DIVIDE expression .)
    RPAREN          reduce using rule 75 (expression -> expression DIVIDE expression .)
    SEMICOLON       reduce using rule 75 (expression -> expression DIVIDE expression .)
    COMMA           reduce using rule 75 (expression -> expression DIVIDE expression .)
    DO              reduce using rule 75 (expression -> expression DIVIDE expression .)
    AND             reduce using rule 75 (expression -> expression DIVIDE expression .)
    OR              reduce using rule 75 (expression -> expression DIVIDE expression .)
    THEN            reduce using rule 75 (expression -> expression DIVIDE expression .)

  ! PLUS            [ shift and go to state 54 ]
  ! MINUS           [ shift and go to state 55 ]
  ! TIMES           [ shift and go to state 56 ]
  ! DIVIDE          [ shift and go to state 57 ]
  ! MOD             [ shift and go to state 58 ]


state 88

    (76) expression -> expression MOD expression .
    (72) expression -> expression . PLUS expression
    (73) expression -> expression . MINUS expression
    (74) expression -> expression . TIMES expression
    (75) expression -> expression . DIVIDE expression
    (76) expression -> expression . MOD expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
    WHILE           reduce using rule 76 (expression -> expression MOD expression .)
    FOR             reduce using rule 76 (expression -> expression MOD expression .)
    REPEAT          reduce using rule 76 (expression -> expression MOD expression .)
    IF              reduce using rule 76 (expression -> expression MOD expression .)
    LPAREN          reduce using rule 76 (expression -> expression MOD expression .)
    ID              reduce using rule 76 (expression -> expression MOD expression .)
    WRITE           reduce using rule 76 (expression -> expression MOD expression .)
    INT             reduce using rule 76 (expression -> expression MOD expression .)
    RE              reduce using rule 76 (expression -> expression MOD expression .)
    END             reduce using rule 76 (expression -> expression MOD expression .)
    UNTIL           reduce using rule 76 (expression -> expression MOD expression .)
    LESSER          reduce using rule 76 (expression -> expression MOD expression .)
    LESSER_EQUAL    reduce using rule 76 (expression -> expression MOD expression .)
    EQUAL           reduce using rule 76 (expression -> expression MOD expression .)
    GREATER_EQUAL   reduce using rule 76 (expression -> expression MOD expression .)
    GREATER         reduce using rule 76 (expression -> expression MOD expression .)
    RPAREN          reduce using rule 76 (expression -> expression MOD expression .)
    SEMICOLON       reduce using rule 76 (expression -> expression MOD expression .)
    COMMA           reduce using rule 76 (expression -> expression MOD expression .)
    DO              reduce using rule 76 (expression -> expression MOD expression .)
    AND             reduce using rule 76 (expression -> expression MOD expression .)
    OR              reduce using rule 76 (expression -> expression MOD expression .)
    THEN            reduce using rule 76 (expression -> expression MOD expression .)
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    TIMES           shift and go to state 56
    DIVIDE          shift and go to state 57
    MOD             shift and go to state 58

  ! PLUS            [ reduce using rule 76 (expression -> expression MOD expression .) ]
  ! MINUS           [ reduce using rule 76 (expression -> expression MOD expression .) ]
  ! TIMES           [ reduce using rule 76 (expression -> expression MOD expression .) ]
  ! DIVIDE          [ reduce using rule 76 (expression -> expression MOD expression .) ]
  ! MOD             [ reduce using rule 76 (expression -> expression MOD expression .) ]


state 89

    (36) while_loop -> WHILE boolean_expression DO . main_body
    (25) main_body -> . BEGIN body END

    BEGIN           shift and go to state 16

    main_body                      shift and go to state 119

state 90

    (53) boolean_expression -> boolean_expression and_or . boolean_expression
    (47) boolean_expression -> . expression LESSER expression
    (48) boolean_expression -> . expression LESSER_EQUAL expression
    (49) boolean_expression -> . expression EQUAL expression
    (50) boolean_expression -> . expression GREATER_EQUAL expression
    (51) boolean_expression -> . expression GREATER expression
    (52) boolean_expression -> . NOT boolean_expression
    (53) boolean_expression -> . boolean_expression and_or boolean_expression
    (54) boolean_expression -> . LPAREN boolean_expression RPAREN
    (55) boolean_expression -> . BOOL
    (72) expression -> . expression PLUS expression
    (73) expression -> . expression MINUS expression
    (74) expression -> . expression TIMES expression
    (75) expression -> . expression DIVIDE expression
    (76) expression -> . expression MOD expression
    (77) expression -> . LPAREN expression RPAREN
    (78) expression -> . numeric
    (79) expression -> . function_call
    (44) numeric -> . INT
    (45) numeric -> . RE
    (46) numeric -> . ID
    (63) function_call -> . ID LPAREN vars RPAREN

    NOT             shift and go to state 63
    LPAREN          shift and go to state 64
    BOOL            shift and go to state 65
    INT             shift and go to state 33
    RE              shift and go to state 40
    ID              shift and go to state 66

    boolean_expression             shift and go to state 120
    expression                     shift and go to state 62
    numeric                        shift and go to state 37
    function_call                  shift and go to state 38

state 91

    (56) and_or -> AND .

    NOT             reduce using rule 56 (and_or -> AND .)
    LPAREN          reduce using rule 56 (and_or -> AND .)
    BOOL            reduce using rule 56 (and_or -> AND .)
    INT             reduce using rule 56 (and_or -> AND .)
    RE              reduce using rule 56 (and_or -> AND .)
    ID              reduce using rule 56 (and_or -> AND .)


state 92

    (57) and_or -> OR .

    NOT             reduce using rule 57 (and_or -> OR .)
    LPAREN          reduce using rule 57 (and_or -> OR .)
    BOOL            reduce using rule 57 (and_or -> OR .)
    INT             reduce using rule 57 (and_or -> OR .)
    RE              reduce using rule 57 (and_or -> OR .)
    ID              reduce using rule 57 (and_or -> OR .)


state 93

    (47) boolean_expression -> expression LESSER . expression
    (72) expression -> . expression PLUS expression
    (73) expression -> . expression MINUS expression
    (74) expression -> . expression TIMES expression
    (75) expression -> . expression DIVIDE expression
    (76) expression -> . expression MOD expression
    (77) expression -> . LPAREN expression RPAREN
    (78) expression -> . numeric
    (79) expression -> . function_call
    (44) numeric -> . INT
    (45) numeric -> . RE
    (46) numeric -> . ID
    (63) function_call -> . ID LPAREN vars RPAREN

    LPAREN          shift and go to state 36
    INT             shift and go to state 33
    RE              shift and go to state 40
    ID              shift and go to state 66

    expression                     shift and go to state 121
    numeric                        shift and go to state 37
    function_call                  shift and go to state 38

state 94

    (48) boolean_expression -> expression LESSER_EQUAL . expression
    (72) expression -> . expression PLUS expression
    (73) expression -> . expression MINUS expression
    (74) expression -> . expression TIMES expression
    (75) expression -> . expression DIVIDE expression
    (76) expression -> . expression MOD expression
    (77) expression -> . LPAREN expression RPAREN
    (78) expression -> . numeric
    (79) expression -> . function_call
    (44) numeric -> . INT
    (45) numeric -> . RE
    (46) numeric -> . ID
    (63) function_call -> . ID LPAREN vars RPAREN

    LPAREN          shift and go to state 36
    INT             shift and go to state 33
    RE              shift and go to state 40
    ID              shift and go to state 66

    expression                     shift and go to state 122
    numeric                        shift and go to state 37
    function_call                  shift and go to state 38

state 95

    (49) boolean_expression -> expression EQUAL . expression
    (72) expression -> . expression PLUS expression
    (73) expression -> . expression MINUS expression
    (74) expression -> . expression TIMES expression
    (75) expression -> . expression DIVIDE expression
    (76) expression -> . expression MOD expression
    (77) expression -> . LPAREN expression RPAREN
    (78) expression -> . numeric
    (79) expression -> . function_call
    (44) numeric -> . INT
    (45) numeric -> . RE
    (46) numeric -> . ID
    (63) function_call -> . ID LPAREN vars RPAREN

    LPAREN          shift and go to state 36
    INT             shift and go to state 33
    RE              shift and go to state 40
    ID              shift and go to state 66

    expression                     shift and go to state 123
    numeric                        shift and go to state 37
    function_call                  shift and go to state 38

state 96

    (50) boolean_expression -> expression GREATER_EQUAL . expression
    (72) expression -> . expression PLUS expression
    (73) expression -> . expression MINUS expression
    (74) expression -> . expression TIMES expression
    (75) expression -> . expression DIVIDE expression
    (76) expression -> . expression MOD expression
    (77) expression -> . LPAREN expression RPAREN
    (78) expression -> . numeric
    (79) expression -> . function_call
    (44) numeric -> . INT
    (45) numeric -> . RE
    (46) numeric -> . ID
    (63) function_call -> . ID LPAREN vars RPAREN

    LPAREN          shift and go to state 36
    INT             shift and go to state 33
    RE              shift and go to state 40
    ID              shift and go to state 66

    expression                     shift and go to state 124
    numeric                        shift and go to state 37
    function_call                  shift and go to state 38

state 97

    (51) boolean_expression -> expression GREATER . expression
    (72) expression -> . expression PLUS expression
    (73) expression -> . expression MINUS expression
    (74) expression -> . expression TIMES expression
    (75) expression -> . expression DIVIDE expression
    (76) expression -> . expression MOD expression
    (77) expression -> . LPAREN expression RPAREN
    (78) expression -> . numeric
    (79) expression -> . function_call
    (44) numeric -> . INT
    (45) numeric -> . RE
    (46) numeric -> . ID
    (63) function_call -> . ID LPAREN vars RPAREN

    LPAREN          shift and go to state 36
    INT             shift and go to state 33
    RE              shift and go to state 40
    ID              shift and go to state 66

    expression                     shift and go to state 125
    numeric                        shift and go to state 37
    function_call                  shift and go to state 38

state 98

    (52) boolean_expression -> NOT boolean_expression .
    (53) boolean_expression -> boolean_expression . and_or boolean_expression
    (56) and_or -> . AND
    (57) and_or -> . OR

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    DO              reduce using rule 52 (boolean_expression -> NOT boolean_expression .)
    THEN            reduce using rule 52 (boolean_expression -> NOT boolean_expression .)
    RPAREN          reduce using rule 52 (boolean_expression -> NOT boolean_expression .)
    SEMICOLON       reduce using rule 52 (boolean_expression -> NOT boolean_expression .)
    AND             shift and go to state 91
    OR              shift and go to state 92

  ! AND             [ reduce using rule 52 (boolean_expression -> NOT boolean_expression .) ]
  ! OR              [ reduce using rule 52 (boolean_expression -> NOT boolean_expression .) ]

    and_or                         shift and go to state 90

state 99

    (54) boolean_expression -> LPAREN boolean_expression . RPAREN
    (53) boolean_expression -> boolean_expression . and_or boolean_expression
    (56) and_or -> . AND
    (57) and_or -> . OR

    RPAREN          shift and go to state 126
    AND             shift and go to state 91
    OR              shift and go to state 92

    and_or                         shift and go to state 90

state 100

    (77) expression -> LPAREN expression . RPAREN
    (47) boolean_expression -> expression . LESSER expression
    (48) boolean_expression -> expression . LESSER_EQUAL expression
    (49) boolean_expression -> expression . EQUAL expression
    (50) boolean_expression -> expression . GREATER_EQUAL expression
    (51) boolean_expression -> expression . GREATER expression
    (72) expression -> expression . PLUS expression
    (73) expression -> expression . MINUS expression
    (74) expression -> expression . TIMES expression
    (75) expression -> expression . DIVIDE expression
    (76) expression -> expression . MOD expression

    RPAREN          shift and go to state 113
    LESSER          shift and go to state 93
    LESSER_EQUAL    shift and go to state 94
    EQUAL           shift and go to state 95
    GREATER_EQUAL   shift and go to state 96
    GREATER         shift and go to state 97
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    TIMES           shift and go to state 56
    DIVIDE          shift and go to state 57
    MOD             shift and go to state 58


state 101

    (37) for_loop -> FOR ID ASSIGN . TO INT DO main_body
    (38) for_loop -> FOR ID ASSIGN . DOWNTO INT DO main_body
    (39) for_loop -> FOR ID ASSIGN . INT DOWNTO INT DO main_body
    (40) for_loop -> FOR ID ASSIGN . INT TO INT DO main_body

    TO              shift and go to state 127
    DOWNTO          shift and go to state 129
    INT             shift and go to state 128


state 102

    (58) var_assign -> ID ASSIGN STR . SEMICOLON

    SEMICOLON       shift and go to state 130


state 103

    (59) var_assign -> ID ASSIGN CHAR . SEMICOLON

    SEMICOLON       shift and go to state 131


state 104

    (60) var_assign -> ID ASSIGN BOOL . SEMICOLON

    SEMICOLON       shift and go to state 132


state 105

    (61) var_assign -> ID ASSIGN expression . SEMICOLON
    (72) expression -> expression . PLUS expression
    (73) expression -> expression . MINUS expression
    (74) expression -> expression . TIMES expression
    (75) expression -> expression . DIVIDE expression
    (76) expression -> expression . MOD expression

    SEMICOLON       shift and go to state 133
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    TIMES           shift and go to state 56
    DIVIDE          shift and go to state 57
    MOD             shift and go to state 58


state 106

    (63) function_call -> ID LPAREN vars . RPAREN

    RPAREN          shift and go to state 134


state 107

    (64) vars -> STR . COMMA vars
    (69) vars -> STR .

    COMMA           shift and go to state 135
    RPAREN          reduce using rule 69 (vars -> STR .)


state 108

    (65) vars -> BOOL . COMMA vars
    (70) vars -> BOOL .

    COMMA           shift and go to state 136
    RPAREN          reduce using rule 70 (vars -> BOOL .)


state 109

    (66) vars -> CHAR . COMMA vars
    (71) vars -> CHAR .

    COMMA           shift and go to state 137
    RPAREN          reduce using rule 71 (vars -> CHAR .)


state 110

    (67) vars -> expression . COMMA vars
    (68) vars -> expression .
    (72) expression -> expression . PLUS expression
    (73) expression -> expression . MINUS expression
    (74) expression -> expression . TIMES expression
    (75) expression -> expression . DIVIDE expression
    (76) expression -> expression . MOD expression

    COMMA           shift and go to state 138
    RPAREN          reduce using rule 68 (vars -> expression .)
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    TIMES           shift and go to state 56
    DIVIDE          shift and go to state 57
    MOD             shift and go to state 58


state 111

    (41) repeat_loop -> REPEAT body UNTIL . boolean_expression SEMICOLON
    (47) boolean_expression -> . expression LESSER expression
    (48) boolean_expression -> . expression LESSER_EQUAL expression
    (49) boolean_expression -> . expression EQUAL expression
    (50) boolean_expression -> . expression GREATER_EQUAL expression
    (51) boolean_expression -> . expression GREATER expression
    (52) boolean_expression -> . NOT boolean_expression
    (53) boolean_expression -> . boolean_expression and_or boolean_expression
    (54) boolean_expression -> . LPAREN boolean_expression RPAREN
    (55) boolean_expression -> . BOOL
    (72) expression -> . expression PLUS expression
    (73) expression -> . expression MINUS expression
    (74) expression -> . expression TIMES expression
    (75) expression -> . expression DIVIDE expression
    (76) expression -> . expression MOD expression
    (77) expression -> . LPAREN expression RPAREN
    (78) expression -> . numeric
    (79) expression -> . function_call
    (44) numeric -> . INT
    (45) numeric -> . RE
    (46) numeric -> . ID
    (63) function_call -> . ID LPAREN vars RPAREN

    NOT             shift and go to state 63
    LPAREN          shift and go to state 64
    BOOL            shift and go to state 65
    INT             shift and go to state 33
    RE              shift and go to state 40
    ID              shift and go to state 66

    boolean_expression             shift and go to state 139
    expression                     shift and go to state 62
    numeric                        shift and go to state 37
    function_call                  shift and go to state 38

state 112

    (42) if_statement -> IF boolean_expression THEN . main_body
    (43) if_statement -> IF boolean_expression THEN . main_body ELSE main_body
    (25) main_body -> . BEGIN body END

    BEGIN           shift and go to state 16

    main_body                      shift and go to state 140

state 113

    (77) expression -> LPAREN expression RPAREN .

    PLUS            reduce using rule 77 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 77 (expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 77 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 77 (expression -> LPAREN expression RPAREN .)
    MOD             reduce using rule 77 (expression -> LPAREN expression RPAREN .)
    WHILE           reduce using rule 77 (expression -> LPAREN expression RPAREN .)
    FOR             reduce using rule 77 (expression -> LPAREN expression RPAREN .)
    REPEAT          reduce using rule 77 (expression -> LPAREN expression RPAREN .)
    IF              reduce using rule 77 (expression -> LPAREN expression RPAREN .)
    LPAREN          reduce using rule 77 (expression -> LPAREN expression RPAREN .)
    ID              reduce using rule 77 (expression -> LPAREN expression RPAREN .)
    WRITE           reduce using rule 77 (expression -> LPAREN expression RPAREN .)
    INT             reduce using rule 77 (expression -> LPAREN expression RPAREN .)
    RE              reduce using rule 77 (expression -> LPAREN expression RPAREN .)
    END             reduce using rule 77 (expression -> LPAREN expression RPAREN .)
    UNTIL           reduce using rule 77 (expression -> LPAREN expression RPAREN .)
    LESSER          reduce using rule 77 (expression -> LPAREN expression RPAREN .)
    LESSER_EQUAL    reduce using rule 77 (expression -> LPAREN expression RPAREN .)
    EQUAL           reduce using rule 77 (expression -> LPAREN expression RPAREN .)
    GREATER_EQUAL   reduce using rule 77 (expression -> LPAREN expression RPAREN .)
    GREATER         reduce using rule 77 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 77 (expression -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 77 (expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 77 (expression -> LPAREN expression RPAREN .)
    DO              reduce using rule 77 (expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 77 (expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 77 (expression -> LPAREN expression RPAREN .)
    THEN            reduce using rule 77 (expression -> LPAREN expression RPAREN .)


state 114

    (26) write -> WRITE LPAREN STR . RPAREN SEMICOLON

    RPAREN          shift and go to state 141


state 115

    (27) write -> WRITE LPAREN expression . RPAREN SEMICOLON
    (72) expression -> expression . PLUS expression
    (73) expression -> expression . MINUS expression
    (74) expression -> expression . TIMES expression
    (75) expression -> expression . DIVIDE expression
    (76) expression -> expression . MOD expression

    RPAREN          shift and go to state 142
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    TIMES           shift and go to state 56
    DIVIDE          shift and go to state 57
    MOD             shift and go to state 58


state 116

    (9) function_variables -> ID COLON . INTEGER
    (10) function_variables -> ID COLON . REAL
    (11) function_variables -> ID COLON . BOOLEAN
    (12) function_variables -> ID COLON . STRING
    (13) function_variables -> ID COLON . CHARACTER
    (14) function_variables -> ID COLON . INTEGER COMMA function_variables
    (15) function_variables -> ID COLON . REAL COMMA function_variables
    (16) function_variables -> ID COLON . BOOLEAN COMMA function_variables
    (17) function_variables -> ID COLON . STRING COMMA function_variables
    (18) function_variables -> ID COLON . CHARACTER COMMA function_variables
    (19) function_variables -> ID COLON . INTEGER SEMICOLON function_variables
    (20) function_variables -> ID COLON . REAL SEMICOLON function_variables
    (21) function_variables -> ID COLON . BOOLEAN SEMICOLON function_variables
    (22) function_variables -> ID COLON . STRING SEMICOLON function_variables
    (23) function_variables -> ID COLON . CHARACTER SEMICOLON function_variables

    INTEGER         shift and go to state 143
    REAL            shift and go to state 144
    BOOLEAN         shift and go to state 145
    STRING          shift and go to state 146
    CHARACTER       shift and go to state 147


state 117

    (2) functions -> FUNCTION ID LPAREN function_variables RPAREN . COLON INTEGER SEMICOLON variable_block main_body functions
    (3) functions -> FUNCTION ID LPAREN function_variables RPAREN . COLON REAL SEMICOLON variable_block main_body functions
    (4) functions -> FUNCTION ID LPAREN function_variables RPAREN . COLON BOOLEAN SEMICOLON variable_block main_body functions
    (5) functions -> FUNCTION ID LPAREN function_variables RPAREN . COLON STRING SEMICOLON variable_block main_body functions
    (6) functions -> FUNCTION ID LPAREN function_variables RPAREN . COLON CHARACTER SEMICOLON variable_block main_body functions

    COLON           shift and go to state 148


state 118

    (7) functions -> PROCEDURE ID SEMICOLON variable_block main_body . functions
    (2) functions -> . FUNCTION ID LPAREN function_variables RPAREN COLON INTEGER SEMICOLON variable_block main_body functions
    (3) functions -> . FUNCTION ID LPAREN function_variables RPAREN COLON REAL SEMICOLON variable_block main_body functions
    (4) functions -> . FUNCTION ID LPAREN function_variables RPAREN COLON BOOLEAN SEMICOLON variable_block main_body functions
    (5) functions -> . FUNCTION ID LPAREN function_variables RPAREN COLON STRING SEMICOLON variable_block main_body functions
    (6) functions -> . FUNCTION ID LPAREN function_variables RPAREN COLON CHARACTER SEMICOLON variable_block main_body functions
    (7) functions -> . PROCEDURE ID SEMICOLON variable_block main_body functions
    (8) functions -> . empty
    (89) empty -> .

    FUNCTION        shift and go to state 9
    PROCEDURE       shift and go to state 10
    BEGIN           reduce using rule 89 (empty -> .)

    functions                      shift and go to state 149
    empty                          shift and go to state 11

state 119

    (36) while_loop -> WHILE boolean_expression DO main_body .

    WHILE           reduce using rule 36 (while_loop -> WHILE boolean_expression DO main_body .)
    FOR             reduce using rule 36 (while_loop -> WHILE boolean_expression DO main_body .)
    REPEAT          reduce using rule 36 (while_loop -> WHILE boolean_expression DO main_body .)
    IF              reduce using rule 36 (while_loop -> WHILE boolean_expression DO main_body .)
    LPAREN          reduce using rule 36 (while_loop -> WHILE boolean_expression DO main_body .)
    ID              reduce using rule 36 (while_loop -> WHILE boolean_expression DO main_body .)
    WRITE           reduce using rule 36 (while_loop -> WHILE boolean_expression DO main_body .)
    INT             reduce using rule 36 (while_loop -> WHILE boolean_expression DO main_body .)
    RE              reduce using rule 36 (while_loop -> WHILE boolean_expression DO main_body .)
    END             reduce using rule 36 (while_loop -> WHILE boolean_expression DO main_body .)
    UNTIL           reduce using rule 36 (while_loop -> WHILE boolean_expression DO main_body .)


state 120

    (53) boolean_expression -> boolean_expression and_or boolean_expression .
    (53) boolean_expression -> boolean_expression . and_or boolean_expression
    (56) and_or -> . AND
    (57) and_or -> . OR

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    DO              reduce using rule 53 (boolean_expression -> boolean_expression and_or boolean_expression .)
    THEN            reduce using rule 53 (boolean_expression -> boolean_expression and_or boolean_expression .)
    RPAREN          reduce using rule 53 (boolean_expression -> boolean_expression and_or boolean_expression .)
    SEMICOLON       reduce using rule 53 (boolean_expression -> boolean_expression and_or boolean_expression .)
    AND             shift and go to state 91
    OR              shift and go to state 92

  ! AND             [ reduce using rule 53 (boolean_expression -> boolean_expression and_or boolean_expression .) ]
  ! OR              [ reduce using rule 53 (boolean_expression -> boolean_expression and_or boolean_expression .) ]

    and_or                         shift and go to state 90

state 121

    (47) boolean_expression -> expression LESSER expression .
    (72) expression -> expression . PLUS expression
    (73) expression -> expression . MINUS expression
    (74) expression -> expression . TIMES expression
    (75) expression -> expression . DIVIDE expression
    (76) expression -> expression . MOD expression

    DO              reduce using rule 47 (boolean_expression -> expression LESSER expression .)
    AND             reduce using rule 47 (boolean_expression -> expression LESSER expression .)
    OR              reduce using rule 47 (boolean_expression -> expression LESSER expression .)
    THEN            reduce using rule 47 (boolean_expression -> expression LESSER expression .)
    RPAREN          reduce using rule 47 (boolean_expression -> expression LESSER expression .)
    SEMICOLON       reduce using rule 47 (boolean_expression -> expression LESSER expression .)
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    TIMES           shift and go to state 56
    DIVIDE          shift and go to state 57
    MOD             shift and go to state 58


state 122

    (48) boolean_expression -> expression LESSER_EQUAL expression .
    (72) expression -> expression . PLUS expression
    (73) expression -> expression . MINUS expression
    (74) expression -> expression . TIMES expression
    (75) expression -> expression . DIVIDE expression
    (76) expression -> expression . MOD expression

    DO              reduce using rule 48 (boolean_expression -> expression LESSER_EQUAL expression .)
    AND             reduce using rule 48 (boolean_expression -> expression LESSER_EQUAL expression .)
    OR              reduce using rule 48 (boolean_expression -> expression LESSER_EQUAL expression .)
    THEN            reduce using rule 48 (boolean_expression -> expression LESSER_EQUAL expression .)
    RPAREN          reduce using rule 48 (boolean_expression -> expression LESSER_EQUAL expression .)
    SEMICOLON       reduce using rule 48 (boolean_expression -> expression LESSER_EQUAL expression .)
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    TIMES           shift and go to state 56
    DIVIDE          shift and go to state 57
    MOD             shift and go to state 58


state 123

    (49) boolean_expression -> expression EQUAL expression .
    (72) expression -> expression . PLUS expression
    (73) expression -> expression . MINUS expression
    (74) expression -> expression . TIMES expression
    (75) expression -> expression . DIVIDE expression
    (76) expression -> expression . MOD expression

    DO              reduce using rule 49 (boolean_expression -> expression EQUAL expression .)
    AND             reduce using rule 49 (boolean_expression -> expression EQUAL expression .)
    OR              reduce using rule 49 (boolean_expression -> expression EQUAL expression .)
    THEN            reduce using rule 49 (boolean_expression -> expression EQUAL expression .)
    RPAREN          reduce using rule 49 (boolean_expression -> expression EQUAL expression .)
    SEMICOLON       reduce using rule 49 (boolean_expression -> expression EQUAL expression .)
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    TIMES           shift and go to state 56
    DIVIDE          shift and go to state 57
    MOD             shift and go to state 58


state 124

    (50) boolean_expression -> expression GREATER_EQUAL expression .
    (72) expression -> expression . PLUS expression
    (73) expression -> expression . MINUS expression
    (74) expression -> expression . TIMES expression
    (75) expression -> expression . DIVIDE expression
    (76) expression -> expression . MOD expression

    DO              reduce using rule 50 (boolean_expression -> expression GREATER_EQUAL expression .)
    AND             reduce using rule 50 (boolean_expression -> expression GREATER_EQUAL expression .)
    OR              reduce using rule 50 (boolean_expression -> expression GREATER_EQUAL expression .)
    THEN            reduce using rule 50 (boolean_expression -> expression GREATER_EQUAL expression .)
    RPAREN          reduce using rule 50 (boolean_expression -> expression GREATER_EQUAL expression .)
    SEMICOLON       reduce using rule 50 (boolean_expression -> expression GREATER_EQUAL expression .)
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    TIMES           shift and go to state 56
    DIVIDE          shift and go to state 57
    MOD             shift and go to state 58


state 125

    (51) boolean_expression -> expression GREATER expression .
    (72) expression -> expression . PLUS expression
    (73) expression -> expression . MINUS expression
    (74) expression -> expression . TIMES expression
    (75) expression -> expression . DIVIDE expression
    (76) expression -> expression . MOD expression

    DO              reduce using rule 51 (boolean_expression -> expression GREATER expression .)
    AND             reduce using rule 51 (boolean_expression -> expression GREATER expression .)
    OR              reduce using rule 51 (boolean_expression -> expression GREATER expression .)
    THEN            reduce using rule 51 (boolean_expression -> expression GREATER expression .)
    RPAREN          reduce using rule 51 (boolean_expression -> expression GREATER expression .)
    SEMICOLON       reduce using rule 51 (boolean_expression -> expression GREATER expression .)
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    TIMES           shift and go to state 56
    DIVIDE          shift and go to state 57
    MOD             shift and go to state 58


state 126

    (54) boolean_expression -> LPAREN boolean_expression RPAREN .

    DO              reduce using rule 54 (boolean_expression -> LPAREN boolean_expression RPAREN .)
    AND             reduce using rule 54 (boolean_expression -> LPAREN boolean_expression RPAREN .)
    OR              reduce using rule 54 (boolean_expression -> LPAREN boolean_expression RPAREN .)
    THEN            reduce using rule 54 (boolean_expression -> LPAREN boolean_expression RPAREN .)
    RPAREN          reduce using rule 54 (boolean_expression -> LPAREN boolean_expression RPAREN .)
    SEMICOLON       reduce using rule 54 (boolean_expression -> LPAREN boolean_expression RPAREN .)


state 127

    (37) for_loop -> FOR ID ASSIGN TO . INT DO main_body

    INT             shift and go to state 150


state 128

    (39) for_loop -> FOR ID ASSIGN INT . DOWNTO INT DO main_body
    (40) for_loop -> FOR ID ASSIGN INT . TO INT DO main_body

    DOWNTO          shift and go to state 151
    TO              shift and go to state 152


state 129

    (38) for_loop -> FOR ID ASSIGN DOWNTO . INT DO main_body

    INT             shift and go to state 153


state 130

    (58) var_assign -> ID ASSIGN STR SEMICOLON .

    WHILE           reduce using rule 58 (var_assign -> ID ASSIGN STR SEMICOLON .)
    FOR             reduce using rule 58 (var_assign -> ID ASSIGN STR SEMICOLON .)
    REPEAT          reduce using rule 58 (var_assign -> ID ASSIGN STR SEMICOLON .)
    IF              reduce using rule 58 (var_assign -> ID ASSIGN STR SEMICOLON .)
    LPAREN          reduce using rule 58 (var_assign -> ID ASSIGN STR SEMICOLON .)
    ID              reduce using rule 58 (var_assign -> ID ASSIGN STR SEMICOLON .)
    WRITE           reduce using rule 58 (var_assign -> ID ASSIGN STR SEMICOLON .)
    INT             reduce using rule 58 (var_assign -> ID ASSIGN STR SEMICOLON .)
    RE              reduce using rule 58 (var_assign -> ID ASSIGN STR SEMICOLON .)
    END             reduce using rule 58 (var_assign -> ID ASSIGN STR SEMICOLON .)
    UNTIL           reduce using rule 58 (var_assign -> ID ASSIGN STR SEMICOLON .)


state 131

    (59) var_assign -> ID ASSIGN CHAR SEMICOLON .

    WHILE           reduce using rule 59 (var_assign -> ID ASSIGN CHAR SEMICOLON .)
    FOR             reduce using rule 59 (var_assign -> ID ASSIGN CHAR SEMICOLON .)
    REPEAT          reduce using rule 59 (var_assign -> ID ASSIGN CHAR SEMICOLON .)
    IF              reduce using rule 59 (var_assign -> ID ASSIGN CHAR SEMICOLON .)
    LPAREN          reduce using rule 59 (var_assign -> ID ASSIGN CHAR SEMICOLON .)
    ID              reduce using rule 59 (var_assign -> ID ASSIGN CHAR SEMICOLON .)
    WRITE           reduce using rule 59 (var_assign -> ID ASSIGN CHAR SEMICOLON .)
    INT             reduce using rule 59 (var_assign -> ID ASSIGN CHAR SEMICOLON .)
    RE              reduce using rule 59 (var_assign -> ID ASSIGN CHAR SEMICOLON .)
    END             reduce using rule 59 (var_assign -> ID ASSIGN CHAR SEMICOLON .)
    UNTIL           reduce using rule 59 (var_assign -> ID ASSIGN CHAR SEMICOLON .)


state 132

    (60) var_assign -> ID ASSIGN BOOL SEMICOLON .

    WHILE           reduce using rule 60 (var_assign -> ID ASSIGN BOOL SEMICOLON .)
    FOR             reduce using rule 60 (var_assign -> ID ASSIGN BOOL SEMICOLON .)
    REPEAT          reduce using rule 60 (var_assign -> ID ASSIGN BOOL SEMICOLON .)
    IF              reduce using rule 60 (var_assign -> ID ASSIGN BOOL SEMICOLON .)
    LPAREN          reduce using rule 60 (var_assign -> ID ASSIGN BOOL SEMICOLON .)
    ID              reduce using rule 60 (var_assign -> ID ASSIGN BOOL SEMICOLON .)
    WRITE           reduce using rule 60 (var_assign -> ID ASSIGN BOOL SEMICOLON .)
    INT             reduce using rule 60 (var_assign -> ID ASSIGN BOOL SEMICOLON .)
    RE              reduce using rule 60 (var_assign -> ID ASSIGN BOOL SEMICOLON .)
    END             reduce using rule 60 (var_assign -> ID ASSIGN BOOL SEMICOLON .)
    UNTIL           reduce using rule 60 (var_assign -> ID ASSIGN BOOL SEMICOLON .)


state 133

    (61) var_assign -> ID ASSIGN expression SEMICOLON .

    WHILE           reduce using rule 61 (var_assign -> ID ASSIGN expression SEMICOLON .)
    FOR             reduce using rule 61 (var_assign -> ID ASSIGN expression SEMICOLON .)
    REPEAT          reduce using rule 61 (var_assign -> ID ASSIGN expression SEMICOLON .)
    IF              reduce using rule 61 (var_assign -> ID ASSIGN expression SEMICOLON .)
    LPAREN          reduce using rule 61 (var_assign -> ID ASSIGN expression SEMICOLON .)
    ID              reduce using rule 61 (var_assign -> ID ASSIGN expression SEMICOLON .)
    WRITE           reduce using rule 61 (var_assign -> ID ASSIGN expression SEMICOLON .)
    INT             reduce using rule 61 (var_assign -> ID ASSIGN expression SEMICOLON .)
    RE              reduce using rule 61 (var_assign -> ID ASSIGN expression SEMICOLON .)
    END             reduce using rule 61 (var_assign -> ID ASSIGN expression SEMICOLON .)
    UNTIL           reduce using rule 61 (var_assign -> ID ASSIGN expression SEMICOLON .)


state 134

    (63) function_call -> ID LPAREN vars RPAREN .

    PLUS            reduce using rule 63 (function_call -> ID LPAREN vars RPAREN .)
    MINUS           reduce using rule 63 (function_call -> ID LPAREN vars RPAREN .)
    TIMES           reduce using rule 63 (function_call -> ID LPAREN vars RPAREN .)
    DIVIDE          reduce using rule 63 (function_call -> ID LPAREN vars RPAREN .)
    MOD             reduce using rule 63 (function_call -> ID LPAREN vars RPAREN .)
    WHILE           reduce using rule 63 (function_call -> ID LPAREN vars RPAREN .)
    FOR             reduce using rule 63 (function_call -> ID LPAREN vars RPAREN .)
    REPEAT          reduce using rule 63 (function_call -> ID LPAREN vars RPAREN .)
    IF              reduce using rule 63 (function_call -> ID LPAREN vars RPAREN .)
    LPAREN          reduce using rule 63 (function_call -> ID LPAREN vars RPAREN .)
    ID              reduce using rule 63 (function_call -> ID LPAREN vars RPAREN .)
    WRITE           reduce using rule 63 (function_call -> ID LPAREN vars RPAREN .)
    INT             reduce using rule 63 (function_call -> ID LPAREN vars RPAREN .)
    RE              reduce using rule 63 (function_call -> ID LPAREN vars RPAREN .)
    END             reduce using rule 63 (function_call -> ID LPAREN vars RPAREN .)
    UNTIL           reduce using rule 63 (function_call -> ID LPAREN vars RPAREN .)
    LESSER          reduce using rule 63 (function_call -> ID LPAREN vars RPAREN .)
    LESSER_EQUAL    reduce using rule 63 (function_call -> ID LPAREN vars RPAREN .)
    EQUAL           reduce using rule 63 (function_call -> ID LPAREN vars RPAREN .)
    GREATER_EQUAL   reduce using rule 63 (function_call -> ID LPAREN vars RPAREN .)
    GREATER         reduce using rule 63 (function_call -> ID LPAREN vars RPAREN .)
    RPAREN          reduce using rule 63 (function_call -> ID LPAREN vars RPAREN .)
    SEMICOLON       reduce using rule 63 (function_call -> ID LPAREN vars RPAREN .)
    COMMA           reduce using rule 63 (function_call -> ID LPAREN vars RPAREN .)
    DO              reduce using rule 63 (function_call -> ID LPAREN vars RPAREN .)
    AND             reduce using rule 63 (function_call -> ID LPAREN vars RPAREN .)
    OR              reduce using rule 63 (function_call -> ID LPAREN vars RPAREN .)
    THEN            reduce using rule 63 (function_call -> ID LPAREN vars RPAREN .)


state 135

    (64) vars -> STR COMMA . vars
    (64) vars -> . STR COMMA vars
    (65) vars -> . BOOL COMMA vars
    (66) vars -> . CHAR COMMA vars
    (67) vars -> . expression COMMA vars
    (68) vars -> . expression
    (69) vars -> . STR
    (70) vars -> . BOOL
    (71) vars -> . CHAR
    (72) expression -> . expression PLUS expression
    (73) expression -> . expression MINUS expression
    (74) expression -> . expression TIMES expression
    (75) expression -> . expression DIVIDE expression
    (76) expression -> . expression MOD expression
    (77) expression -> . LPAREN expression RPAREN
    (78) expression -> . numeric
    (79) expression -> . function_call
    (44) numeric -> . INT
    (45) numeric -> . RE
    (46) numeric -> . ID
    (63) function_call -> . ID LPAREN vars RPAREN

    STR             shift and go to state 107
    BOOL            shift and go to state 108
    CHAR            shift and go to state 109
    LPAREN          shift and go to state 36
    INT             shift and go to state 33
    RE              shift and go to state 40
    ID              shift and go to state 66

    vars                           shift and go to state 154
    expression                     shift and go to state 110
    numeric                        shift and go to state 37
    function_call                  shift and go to state 38

state 136

    (65) vars -> BOOL COMMA . vars
    (64) vars -> . STR COMMA vars
    (65) vars -> . BOOL COMMA vars
    (66) vars -> . CHAR COMMA vars
    (67) vars -> . expression COMMA vars
    (68) vars -> . expression
    (69) vars -> . STR
    (70) vars -> . BOOL
    (71) vars -> . CHAR
    (72) expression -> . expression PLUS expression
    (73) expression -> . expression MINUS expression
    (74) expression -> . expression TIMES expression
    (75) expression -> . expression DIVIDE expression
    (76) expression -> . expression MOD expression
    (77) expression -> . LPAREN expression RPAREN
    (78) expression -> . numeric
    (79) expression -> . function_call
    (44) numeric -> . INT
    (45) numeric -> . RE
    (46) numeric -> . ID
    (63) function_call -> . ID LPAREN vars RPAREN

    STR             shift and go to state 107
    BOOL            shift and go to state 108
    CHAR            shift and go to state 109
    LPAREN          shift and go to state 36
    INT             shift and go to state 33
    RE              shift and go to state 40
    ID              shift and go to state 66

    vars                           shift and go to state 155
    expression                     shift and go to state 110
    numeric                        shift and go to state 37
    function_call                  shift and go to state 38

state 137

    (66) vars -> CHAR COMMA . vars
    (64) vars -> . STR COMMA vars
    (65) vars -> . BOOL COMMA vars
    (66) vars -> . CHAR COMMA vars
    (67) vars -> . expression COMMA vars
    (68) vars -> . expression
    (69) vars -> . STR
    (70) vars -> . BOOL
    (71) vars -> . CHAR
    (72) expression -> . expression PLUS expression
    (73) expression -> . expression MINUS expression
    (74) expression -> . expression TIMES expression
    (75) expression -> . expression DIVIDE expression
    (76) expression -> . expression MOD expression
    (77) expression -> . LPAREN expression RPAREN
    (78) expression -> . numeric
    (79) expression -> . function_call
    (44) numeric -> . INT
    (45) numeric -> . RE
    (46) numeric -> . ID
    (63) function_call -> . ID LPAREN vars RPAREN

    STR             shift and go to state 107
    BOOL            shift and go to state 108
    CHAR            shift and go to state 109
    LPAREN          shift and go to state 36
    INT             shift and go to state 33
    RE              shift and go to state 40
    ID              shift and go to state 66

    vars                           shift and go to state 156
    expression                     shift and go to state 110
    numeric                        shift and go to state 37
    function_call                  shift and go to state 38

state 138

    (67) vars -> expression COMMA . vars
    (64) vars -> . STR COMMA vars
    (65) vars -> . BOOL COMMA vars
    (66) vars -> . CHAR COMMA vars
    (67) vars -> . expression COMMA vars
    (68) vars -> . expression
    (69) vars -> . STR
    (70) vars -> . BOOL
    (71) vars -> . CHAR
    (72) expression -> . expression PLUS expression
    (73) expression -> . expression MINUS expression
    (74) expression -> . expression TIMES expression
    (75) expression -> . expression DIVIDE expression
    (76) expression -> . expression MOD expression
    (77) expression -> . LPAREN expression RPAREN
    (78) expression -> . numeric
    (79) expression -> . function_call
    (44) numeric -> . INT
    (45) numeric -> . RE
    (46) numeric -> . ID
    (63) function_call -> . ID LPAREN vars RPAREN

    STR             shift and go to state 107
    BOOL            shift and go to state 108
    CHAR            shift and go to state 109
    LPAREN          shift and go to state 36
    INT             shift and go to state 33
    RE              shift and go to state 40
    ID              shift and go to state 66

    expression                     shift and go to state 110
    vars                           shift and go to state 157
    numeric                        shift and go to state 37
    function_call                  shift and go to state 38

state 139

    (41) repeat_loop -> REPEAT body UNTIL boolean_expression . SEMICOLON
    (53) boolean_expression -> boolean_expression . and_or boolean_expression
    (56) and_or -> . AND
    (57) and_or -> . OR

    SEMICOLON       shift and go to state 158
    AND             shift and go to state 91
    OR              shift and go to state 92

    and_or                         shift and go to state 90

state 140

    (42) if_statement -> IF boolean_expression THEN main_body .
    (43) if_statement -> IF boolean_expression THEN main_body . ELSE main_body

    WHILE           reduce using rule 42 (if_statement -> IF boolean_expression THEN main_body .)
    FOR             reduce using rule 42 (if_statement -> IF boolean_expression THEN main_body .)
    REPEAT          reduce using rule 42 (if_statement -> IF boolean_expression THEN main_body .)
    IF              reduce using rule 42 (if_statement -> IF boolean_expression THEN main_body .)
    LPAREN          reduce using rule 42 (if_statement -> IF boolean_expression THEN main_body .)
    ID              reduce using rule 42 (if_statement -> IF boolean_expression THEN main_body .)
    WRITE           reduce using rule 42 (if_statement -> IF boolean_expression THEN main_body .)
    INT             reduce using rule 42 (if_statement -> IF boolean_expression THEN main_body .)
    RE              reduce using rule 42 (if_statement -> IF boolean_expression THEN main_body .)
    END             reduce using rule 42 (if_statement -> IF boolean_expression THEN main_body .)
    UNTIL           reduce using rule 42 (if_statement -> IF boolean_expression THEN main_body .)
    ELSE            shift and go to state 159


state 141

    (26) write -> WRITE LPAREN STR RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 160


state 142

    (27) write -> WRITE LPAREN expression RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 161


state 143

    (9) function_variables -> ID COLON INTEGER .
    (14) function_variables -> ID COLON INTEGER . COMMA function_variables
    (19) function_variables -> ID COLON INTEGER . SEMICOLON function_variables

    RPAREN          reduce using rule 9 (function_variables -> ID COLON INTEGER .)
    COMMA           shift and go to state 162
    SEMICOLON       shift and go to state 163


state 144

    (10) function_variables -> ID COLON REAL .
    (15) function_variables -> ID COLON REAL . COMMA function_variables
    (20) function_variables -> ID COLON REAL . SEMICOLON function_variables

    RPAREN          reduce using rule 10 (function_variables -> ID COLON REAL .)
    COMMA           shift and go to state 164
    SEMICOLON       shift and go to state 165


state 145

    (11) function_variables -> ID COLON BOOLEAN .
    (16) function_variables -> ID COLON BOOLEAN . COMMA function_variables
    (21) function_variables -> ID COLON BOOLEAN . SEMICOLON function_variables

    RPAREN          reduce using rule 11 (function_variables -> ID COLON BOOLEAN .)
    COMMA           shift and go to state 166
    SEMICOLON       shift and go to state 167


state 146

    (12) function_variables -> ID COLON STRING .
    (17) function_variables -> ID COLON STRING . COMMA function_variables
    (22) function_variables -> ID COLON STRING . SEMICOLON function_variables

    RPAREN          reduce using rule 12 (function_variables -> ID COLON STRING .)
    COMMA           shift and go to state 168
    SEMICOLON       shift and go to state 169


state 147

    (13) function_variables -> ID COLON CHARACTER .
    (18) function_variables -> ID COLON CHARACTER . COMMA function_variables
    (23) function_variables -> ID COLON CHARACTER . SEMICOLON function_variables

    RPAREN          reduce using rule 13 (function_variables -> ID COLON CHARACTER .)
    COMMA           shift and go to state 170
    SEMICOLON       shift and go to state 171


state 148

    (2) functions -> FUNCTION ID LPAREN function_variables RPAREN COLON . INTEGER SEMICOLON variable_block main_body functions
    (3) functions -> FUNCTION ID LPAREN function_variables RPAREN COLON . REAL SEMICOLON variable_block main_body functions
    (4) functions -> FUNCTION ID LPAREN function_variables RPAREN COLON . BOOLEAN SEMICOLON variable_block main_body functions
    (5) functions -> FUNCTION ID LPAREN function_variables RPAREN COLON . STRING SEMICOLON variable_block main_body functions
    (6) functions -> FUNCTION ID LPAREN function_variables RPAREN COLON . CHARACTER SEMICOLON variable_block main_body functions

    INTEGER         shift and go to state 172
    REAL            shift and go to state 173
    BOOLEAN         shift and go to state 174
    STRING          shift and go to state 175
    CHARACTER       shift and go to state 176


state 149

    (7) functions -> PROCEDURE ID SEMICOLON variable_block main_body functions .

    BEGIN           reduce using rule 7 (functions -> PROCEDURE ID SEMICOLON variable_block main_body functions .)


state 150

    (37) for_loop -> FOR ID ASSIGN TO INT . DO main_body

    DO              shift and go to state 177


state 151

    (39) for_loop -> FOR ID ASSIGN INT DOWNTO . INT DO main_body

    INT             shift and go to state 178


state 152

    (40) for_loop -> FOR ID ASSIGN INT TO . INT DO main_body

    INT             shift and go to state 179


state 153

    (38) for_loop -> FOR ID ASSIGN DOWNTO INT . DO main_body

    DO              shift and go to state 180


state 154

    (64) vars -> STR COMMA vars .

    RPAREN          reduce using rule 64 (vars -> STR COMMA vars .)


state 155

    (65) vars -> BOOL COMMA vars .

    RPAREN          reduce using rule 65 (vars -> BOOL COMMA vars .)


state 156

    (66) vars -> CHAR COMMA vars .

    RPAREN          reduce using rule 66 (vars -> CHAR COMMA vars .)


state 157

    (67) vars -> expression COMMA vars .

    RPAREN          reduce using rule 67 (vars -> expression COMMA vars .)


state 158

    (41) repeat_loop -> REPEAT body UNTIL boolean_expression SEMICOLON .

    WHILE           reduce using rule 41 (repeat_loop -> REPEAT body UNTIL boolean_expression SEMICOLON .)
    FOR             reduce using rule 41 (repeat_loop -> REPEAT body UNTIL boolean_expression SEMICOLON .)
    REPEAT          reduce using rule 41 (repeat_loop -> REPEAT body UNTIL boolean_expression SEMICOLON .)
    IF              reduce using rule 41 (repeat_loop -> REPEAT body UNTIL boolean_expression SEMICOLON .)
    LPAREN          reduce using rule 41 (repeat_loop -> REPEAT body UNTIL boolean_expression SEMICOLON .)
    ID              reduce using rule 41 (repeat_loop -> REPEAT body UNTIL boolean_expression SEMICOLON .)
    WRITE           reduce using rule 41 (repeat_loop -> REPEAT body UNTIL boolean_expression SEMICOLON .)
    INT             reduce using rule 41 (repeat_loop -> REPEAT body UNTIL boolean_expression SEMICOLON .)
    RE              reduce using rule 41 (repeat_loop -> REPEAT body UNTIL boolean_expression SEMICOLON .)
    END             reduce using rule 41 (repeat_loop -> REPEAT body UNTIL boolean_expression SEMICOLON .)
    UNTIL           reduce using rule 41 (repeat_loop -> REPEAT body UNTIL boolean_expression SEMICOLON .)


state 159

    (43) if_statement -> IF boolean_expression THEN main_body ELSE . main_body
    (25) main_body -> . BEGIN body END

    BEGIN           shift and go to state 16

    main_body                      shift and go to state 181

state 160

    (26) write -> WRITE LPAREN STR RPAREN SEMICOLON .

    WHILE           reduce using rule 26 (write -> WRITE LPAREN STR RPAREN SEMICOLON .)
    FOR             reduce using rule 26 (write -> WRITE LPAREN STR RPAREN SEMICOLON .)
    REPEAT          reduce using rule 26 (write -> WRITE LPAREN STR RPAREN SEMICOLON .)
    IF              reduce using rule 26 (write -> WRITE LPAREN STR RPAREN SEMICOLON .)
    LPAREN          reduce using rule 26 (write -> WRITE LPAREN STR RPAREN SEMICOLON .)
    ID              reduce using rule 26 (write -> WRITE LPAREN STR RPAREN SEMICOLON .)
    WRITE           reduce using rule 26 (write -> WRITE LPAREN STR RPAREN SEMICOLON .)
    INT             reduce using rule 26 (write -> WRITE LPAREN STR RPAREN SEMICOLON .)
    RE              reduce using rule 26 (write -> WRITE LPAREN STR RPAREN SEMICOLON .)
    END             reduce using rule 26 (write -> WRITE LPAREN STR RPAREN SEMICOLON .)
    UNTIL           reduce using rule 26 (write -> WRITE LPAREN STR RPAREN SEMICOLON .)


state 161

    (27) write -> WRITE LPAREN expression RPAREN SEMICOLON .

    WHILE           reduce using rule 27 (write -> WRITE LPAREN expression RPAREN SEMICOLON .)
    FOR             reduce using rule 27 (write -> WRITE LPAREN expression RPAREN SEMICOLON .)
    REPEAT          reduce using rule 27 (write -> WRITE LPAREN expression RPAREN SEMICOLON .)
    IF              reduce using rule 27 (write -> WRITE LPAREN expression RPAREN SEMICOLON .)
    LPAREN          reduce using rule 27 (write -> WRITE LPAREN expression RPAREN SEMICOLON .)
    ID              reduce using rule 27 (write -> WRITE LPAREN expression RPAREN SEMICOLON .)
    WRITE           reduce using rule 27 (write -> WRITE LPAREN expression RPAREN SEMICOLON .)
    INT             reduce using rule 27 (write -> WRITE LPAREN expression RPAREN SEMICOLON .)
    RE              reduce using rule 27 (write -> WRITE LPAREN expression RPAREN SEMICOLON .)
    END             reduce using rule 27 (write -> WRITE LPAREN expression RPAREN SEMICOLON .)
    UNTIL           reduce using rule 27 (write -> WRITE LPAREN expression RPAREN SEMICOLON .)


state 162

    (14) function_variables -> ID COLON INTEGER COMMA . function_variables
    (9) function_variables -> . ID COLON INTEGER
    (10) function_variables -> . ID COLON REAL
    (11) function_variables -> . ID COLON BOOLEAN
    (12) function_variables -> . ID COLON STRING
    (13) function_variables -> . ID COLON CHARACTER
    (14) function_variables -> . ID COLON INTEGER COMMA function_variables
    (15) function_variables -> . ID COLON REAL COMMA function_variables
    (16) function_variables -> . ID COLON BOOLEAN COMMA function_variables
    (17) function_variables -> . ID COLON STRING COMMA function_variables
    (18) function_variables -> . ID COLON CHARACTER COMMA function_variables
    (19) function_variables -> . ID COLON INTEGER SEMICOLON function_variables
    (20) function_variables -> . ID COLON REAL SEMICOLON function_variables
    (21) function_variables -> . ID COLON BOOLEAN SEMICOLON function_variables
    (22) function_variables -> . ID COLON STRING SEMICOLON function_variables
    (23) function_variables -> . ID COLON CHARACTER SEMICOLON function_variables
    (24) function_variables -> . empty
    (89) empty -> .

    ID              shift and go to state 75
    RPAREN          reduce using rule 89 (empty -> .)

    function_variables             shift and go to state 182
    empty                          shift and go to state 77

state 163

    (19) function_variables -> ID COLON INTEGER SEMICOLON . function_variables
    (9) function_variables -> . ID COLON INTEGER
    (10) function_variables -> . ID COLON REAL
    (11) function_variables -> . ID COLON BOOLEAN
    (12) function_variables -> . ID COLON STRING
    (13) function_variables -> . ID COLON CHARACTER
    (14) function_variables -> . ID COLON INTEGER COMMA function_variables
    (15) function_variables -> . ID COLON REAL COMMA function_variables
    (16) function_variables -> . ID COLON BOOLEAN COMMA function_variables
    (17) function_variables -> . ID COLON STRING COMMA function_variables
    (18) function_variables -> . ID COLON CHARACTER COMMA function_variables
    (19) function_variables -> . ID COLON INTEGER SEMICOLON function_variables
    (20) function_variables -> . ID COLON REAL SEMICOLON function_variables
    (21) function_variables -> . ID COLON BOOLEAN SEMICOLON function_variables
    (22) function_variables -> . ID COLON STRING SEMICOLON function_variables
    (23) function_variables -> . ID COLON CHARACTER SEMICOLON function_variables
    (24) function_variables -> . empty
    (89) empty -> .

    ID              shift and go to state 75
    RPAREN          reduce using rule 89 (empty -> .)

    function_variables             shift and go to state 183
    empty                          shift and go to state 77

state 164

    (15) function_variables -> ID COLON REAL COMMA . function_variables
    (9) function_variables -> . ID COLON INTEGER
    (10) function_variables -> . ID COLON REAL
    (11) function_variables -> . ID COLON BOOLEAN
    (12) function_variables -> . ID COLON STRING
    (13) function_variables -> . ID COLON CHARACTER
    (14) function_variables -> . ID COLON INTEGER COMMA function_variables
    (15) function_variables -> . ID COLON REAL COMMA function_variables
    (16) function_variables -> . ID COLON BOOLEAN COMMA function_variables
    (17) function_variables -> . ID COLON STRING COMMA function_variables
    (18) function_variables -> . ID COLON CHARACTER COMMA function_variables
    (19) function_variables -> . ID COLON INTEGER SEMICOLON function_variables
    (20) function_variables -> . ID COLON REAL SEMICOLON function_variables
    (21) function_variables -> . ID COLON BOOLEAN SEMICOLON function_variables
    (22) function_variables -> . ID COLON STRING SEMICOLON function_variables
    (23) function_variables -> . ID COLON CHARACTER SEMICOLON function_variables
    (24) function_variables -> . empty
    (89) empty -> .

    ID              shift and go to state 75
    RPAREN          reduce using rule 89 (empty -> .)

    function_variables             shift and go to state 184
    empty                          shift and go to state 77

state 165

    (20) function_variables -> ID COLON REAL SEMICOLON . function_variables
    (9) function_variables -> . ID COLON INTEGER
    (10) function_variables -> . ID COLON REAL
    (11) function_variables -> . ID COLON BOOLEAN
    (12) function_variables -> . ID COLON STRING
    (13) function_variables -> . ID COLON CHARACTER
    (14) function_variables -> . ID COLON INTEGER COMMA function_variables
    (15) function_variables -> . ID COLON REAL COMMA function_variables
    (16) function_variables -> . ID COLON BOOLEAN COMMA function_variables
    (17) function_variables -> . ID COLON STRING COMMA function_variables
    (18) function_variables -> . ID COLON CHARACTER COMMA function_variables
    (19) function_variables -> . ID COLON INTEGER SEMICOLON function_variables
    (20) function_variables -> . ID COLON REAL SEMICOLON function_variables
    (21) function_variables -> . ID COLON BOOLEAN SEMICOLON function_variables
    (22) function_variables -> . ID COLON STRING SEMICOLON function_variables
    (23) function_variables -> . ID COLON CHARACTER SEMICOLON function_variables
    (24) function_variables -> . empty
    (89) empty -> .

    ID              shift and go to state 75
    RPAREN          reduce using rule 89 (empty -> .)

    function_variables             shift and go to state 185
    empty                          shift and go to state 77

state 166

    (16) function_variables -> ID COLON BOOLEAN COMMA . function_variables
    (9) function_variables -> . ID COLON INTEGER
    (10) function_variables -> . ID COLON REAL
    (11) function_variables -> . ID COLON BOOLEAN
    (12) function_variables -> . ID COLON STRING
    (13) function_variables -> . ID COLON CHARACTER
    (14) function_variables -> . ID COLON INTEGER COMMA function_variables
    (15) function_variables -> . ID COLON REAL COMMA function_variables
    (16) function_variables -> . ID COLON BOOLEAN COMMA function_variables
    (17) function_variables -> . ID COLON STRING COMMA function_variables
    (18) function_variables -> . ID COLON CHARACTER COMMA function_variables
    (19) function_variables -> . ID COLON INTEGER SEMICOLON function_variables
    (20) function_variables -> . ID COLON REAL SEMICOLON function_variables
    (21) function_variables -> . ID COLON BOOLEAN SEMICOLON function_variables
    (22) function_variables -> . ID COLON STRING SEMICOLON function_variables
    (23) function_variables -> . ID COLON CHARACTER SEMICOLON function_variables
    (24) function_variables -> . empty
    (89) empty -> .

    ID              shift and go to state 75
    RPAREN          reduce using rule 89 (empty -> .)

    function_variables             shift and go to state 186
    empty                          shift and go to state 77

state 167

    (21) function_variables -> ID COLON BOOLEAN SEMICOLON . function_variables
    (9) function_variables -> . ID COLON INTEGER
    (10) function_variables -> . ID COLON REAL
    (11) function_variables -> . ID COLON BOOLEAN
    (12) function_variables -> . ID COLON STRING
    (13) function_variables -> . ID COLON CHARACTER
    (14) function_variables -> . ID COLON INTEGER COMMA function_variables
    (15) function_variables -> . ID COLON REAL COMMA function_variables
    (16) function_variables -> . ID COLON BOOLEAN COMMA function_variables
    (17) function_variables -> . ID COLON STRING COMMA function_variables
    (18) function_variables -> . ID COLON CHARACTER COMMA function_variables
    (19) function_variables -> . ID COLON INTEGER SEMICOLON function_variables
    (20) function_variables -> . ID COLON REAL SEMICOLON function_variables
    (21) function_variables -> . ID COLON BOOLEAN SEMICOLON function_variables
    (22) function_variables -> . ID COLON STRING SEMICOLON function_variables
    (23) function_variables -> . ID COLON CHARACTER SEMICOLON function_variables
    (24) function_variables -> . empty
    (89) empty -> .

    ID              shift and go to state 75
    RPAREN          reduce using rule 89 (empty -> .)

    function_variables             shift and go to state 187
    empty                          shift and go to state 77

state 168

    (17) function_variables -> ID COLON STRING COMMA . function_variables
    (9) function_variables -> . ID COLON INTEGER
    (10) function_variables -> . ID COLON REAL
    (11) function_variables -> . ID COLON BOOLEAN
    (12) function_variables -> . ID COLON STRING
    (13) function_variables -> . ID COLON CHARACTER
    (14) function_variables -> . ID COLON INTEGER COMMA function_variables
    (15) function_variables -> . ID COLON REAL COMMA function_variables
    (16) function_variables -> . ID COLON BOOLEAN COMMA function_variables
    (17) function_variables -> . ID COLON STRING COMMA function_variables
    (18) function_variables -> . ID COLON CHARACTER COMMA function_variables
    (19) function_variables -> . ID COLON INTEGER SEMICOLON function_variables
    (20) function_variables -> . ID COLON REAL SEMICOLON function_variables
    (21) function_variables -> . ID COLON BOOLEAN SEMICOLON function_variables
    (22) function_variables -> . ID COLON STRING SEMICOLON function_variables
    (23) function_variables -> . ID COLON CHARACTER SEMICOLON function_variables
    (24) function_variables -> . empty
    (89) empty -> .

    ID              shift and go to state 75
    RPAREN          reduce using rule 89 (empty -> .)

    function_variables             shift and go to state 188
    empty                          shift and go to state 77

state 169

    (22) function_variables -> ID COLON STRING SEMICOLON . function_variables
    (9) function_variables -> . ID COLON INTEGER
    (10) function_variables -> . ID COLON REAL
    (11) function_variables -> . ID COLON BOOLEAN
    (12) function_variables -> . ID COLON STRING
    (13) function_variables -> . ID COLON CHARACTER
    (14) function_variables -> . ID COLON INTEGER COMMA function_variables
    (15) function_variables -> . ID COLON REAL COMMA function_variables
    (16) function_variables -> . ID COLON BOOLEAN COMMA function_variables
    (17) function_variables -> . ID COLON STRING COMMA function_variables
    (18) function_variables -> . ID COLON CHARACTER COMMA function_variables
    (19) function_variables -> . ID COLON INTEGER SEMICOLON function_variables
    (20) function_variables -> . ID COLON REAL SEMICOLON function_variables
    (21) function_variables -> . ID COLON BOOLEAN SEMICOLON function_variables
    (22) function_variables -> . ID COLON STRING SEMICOLON function_variables
    (23) function_variables -> . ID COLON CHARACTER SEMICOLON function_variables
    (24) function_variables -> . empty
    (89) empty -> .

    ID              shift and go to state 75
    RPAREN          reduce using rule 89 (empty -> .)

    function_variables             shift and go to state 189
    empty                          shift and go to state 77

state 170

    (18) function_variables -> ID COLON CHARACTER COMMA . function_variables
    (9) function_variables -> . ID COLON INTEGER
    (10) function_variables -> . ID COLON REAL
    (11) function_variables -> . ID COLON BOOLEAN
    (12) function_variables -> . ID COLON STRING
    (13) function_variables -> . ID COLON CHARACTER
    (14) function_variables -> . ID COLON INTEGER COMMA function_variables
    (15) function_variables -> . ID COLON REAL COMMA function_variables
    (16) function_variables -> . ID COLON BOOLEAN COMMA function_variables
    (17) function_variables -> . ID COLON STRING COMMA function_variables
    (18) function_variables -> . ID COLON CHARACTER COMMA function_variables
    (19) function_variables -> . ID COLON INTEGER SEMICOLON function_variables
    (20) function_variables -> . ID COLON REAL SEMICOLON function_variables
    (21) function_variables -> . ID COLON BOOLEAN SEMICOLON function_variables
    (22) function_variables -> . ID COLON STRING SEMICOLON function_variables
    (23) function_variables -> . ID COLON CHARACTER SEMICOLON function_variables
    (24) function_variables -> . empty
    (89) empty -> .

    ID              shift and go to state 75
    RPAREN          reduce using rule 89 (empty -> .)

    function_variables             shift and go to state 190
    empty                          shift and go to state 77

state 171

    (23) function_variables -> ID COLON CHARACTER SEMICOLON . function_variables
    (9) function_variables -> . ID COLON INTEGER
    (10) function_variables -> . ID COLON REAL
    (11) function_variables -> . ID COLON BOOLEAN
    (12) function_variables -> . ID COLON STRING
    (13) function_variables -> . ID COLON CHARACTER
    (14) function_variables -> . ID COLON INTEGER COMMA function_variables
    (15) function_variables -> . ID COLON REAL COMMA function_variables
    (16) function_variables -> . ID COLON BOOLEAN COMMA function_variables
    (17) function_variables -> . ID COLON STRING COMMA function_variables
    (18) function_variables -> . ID COLON CHARACTER COMMA function_variables
    (19) function_variables -> . ID COLON INTEGER SEMICOLON function_variables
    (20) function_variables -> . ID COLON REAL SEMICOLON function_variables
    (21) function_variables -> . ID COLON BOOLEAN SEMICOLON function_variables
    (22) function_variables -> . ID COLON STRING SEMICOLON function_variables
    (23) function_variables -> . ID COLON CHARACTER SEMICOLON function_variables
    (24) function_variables -> . empty
    (89) empty -> .

    ID              shift and go to state 75
    RPAREN          reduce using rule 89 (empty -> .)

    function_variables             shift and go to state 191
    empty                          shift and go to state 77

state 172

    (2) functions -> FUNCTION ID LPAREN function_variables RPAREN COLON INTEGER . SEMICOLON variable_block main_body functions

    SEMICOLON       shift and go to state 192


state 173

    (3) functions -> FUNCTION ID LPAREN function_variables RPAREN COLON REAL . SEMICOLON variable_block main_body functions

    SEMICOLON       shift and go to state 193


state 174

    (4) functions -> FUNCTION ID LPAREN function_variables RPAREN COLON BOOLEAN . SEMICOLON variable_block main_body functions

    SEMICOLON       shift and go to state 194


state 175

    (5) functions -> FUNCTION ID LPAREN function_variables RPAREN COLON STRING . SEMICOLON variable_block main_body functions

    SEMICOLON       shift and go to state 195


state 176

    (6) functions -> FUNCTION ID LPAREN function_variables RPAREN COLON CHARACTER . SEMICOLON variable_block main_body functions

    SEMICOLON       shift and go to state 196


state 177

    (37) for_loop -> FOR ID ASSIGN TO INT DO . main_body
    (25) main_body -> . BEGIN body END

    BEGIN           shift and go to state 16

    main_body                      shift and go to state 197

state 178

    (39) for_loop -> FOR ID ASSIGN INT DOWNTO INT . DO main_body

    DO              shift and go to state 198


state 179

    (40) for_loop -> FOR ID ASSIGN INT TO INT . DO main_body

    DO              shift and go to state 199


state 180

    (38) for_loop -> FOR ID ASSIGN DOWNTO INT DO . main_body
    (25) main_body -> . BEGIN body END

    BEGIN           shift and go to state 16

    main_body                      shift and go to state 200

state 181

    (43) if_statement -> IF boolean_expression THEN main_body ELSE main_body .

    WHILE           reduce using rule 43 (if_statement -> IF boolean_expression THEN main_body ELSE main_body .)
    FOR             reduce using rule 43 (if_statement -> IF boolean_expression THEN main_body ELSE main_body .)
    REPEAT          reduce using rule 43 (if_statement -> IF boolean_expression THEN main_body ELSE main_body .)
    IF              reduce using rule 43 (if_statement -> IF boolean_expression THEN main_body ELSE main_body .)
    LPAREN          reduce using rule 43 (if_statement -> IF boolean_expression THEN main_body ELSE main_body .)
    ID              reduce using rule 43 (if_statement -> IF boolean_expression THEN main_body ELSE main_body .)
    WRITE           reduce using rule 43 (if_statement -> IF boolean_expression THEN main_body ELSE main_body .)
    INT             reduce using rule 43 (if_statement -> IF boolean_expression THEN main_body ELSE main_body .)
    RE              reduce using rule 43 (if_statement -> IF boolean_expression THEN main_body ELSE main_body .)
    END             reduce using rule 43 (if_statement -> IF boolean_expression THEN main_body ELSE main_body .)
    UNTIL           reduce using rule 43 (if_statement -> IF boolean_expression THEN main_body ELSE main_body .)


state 182

    (14) function_variables -> ID COLON INTEGER COMMA function_variables .

    RPAREN          reduce using rule 14 (function_variables -> ID COLON INTEGER COMMA function_variables .)


state 183

    (19) function_variables -> ID COLON INTEGER SEMICOLON function_variables .

    RPAREN          reduce using rule 19 (function_variables -> ID COLON INTEGER SEMICOLON function_variables .)


state 184

    (15) function_variables -> ID COLON REAL COMMA function_variables .

    RPAREN          reduce using rule 15 (function_variables -> ID COLON REAL COMMA function_variables .)


state 185

    (20) function_variables -> ID COLON REAL SEMICOLON function_variables .

    RPAREN          reduce using rule 20 (function_variables -> ID COLON REAL SEMICOLON function_variables .)


state 186

    (16) function_variables -> ID COLON BOOLEAN COMMA function_variables .

    RPAREN          reduce using rule 16 (function_variables -> ID COLON BOOLEAN COMMA function_variables .)


state 187

    (21) function_variables -> ID COLON BOOLEAN SEMICOLON function_variables .

    RPAREN          reduce using rule 21 (function_variables -> ID COLON BOOLEAN SEMICOLON function_variables .)


state 188

    (17) function_variables -> ID COLON STRING COMMA function_variables .

    RPAREN          reduce using rule 17 (function_variables -> ID COLON STRING COMMA function_variables .)


state 189

    (22) function_variables -> ID COLON STRING SEMICOLON function_variables .

    RPAREN          reduce using rule 22 (function_variables -> ID COLON STRING SEMICOLON function_variables .)


state 190

    (18) function_variables -> ID COLON CHARACTER COMMA function_variables .

    RPAREN          reduce using rule 18 (function_variables -> ID COLON CHARACTER COMMA function_variables .)


state 191

    (23) function_variables -> ID COLON CHARACTER SEMICOLON function_variables .

    RPAREN          reduce using rule 23 (function_variables -> ID COLON CHARACTER SEMICOLON function_variables .)


state 192

    (2) functions -> FUNCTION ID LPAREN function_variables RPAREN COLON INTEGER SEMICOLON . variable_block main_body functions
    (80) variable_block -> . empty
    (81) variable_block -> . VAR variables
    (89) empty -> .

    VAR             shift and go to state 7
    BEGIN           reduce using rule 89 (empty -> .)

    variable_block                 shift and go to state 201
    empty                          shift and go to state 6

state 193

    (3) functions -> FUNCTION ID LPAREN function_variables RPAREN COLON REAL SEMICOLON . variable_block main_body functions
    (80) variable_block -> . empty
    (81) variable_block -> . VAR variables
    (89) empty -> .

    VAR             shift and go to state 7
    BEGIN           reduce using rule 89 (empty -> .)

    variable_block                 shift and go to state 202
    empty                          shift and go to state 6

state 194

    (4) functions -> FUNCTION ID LPAREN function_variables RPAREN COLON BOOLEAN SEMICOLON . variable_block main_body functions
    (80) variable_block -> . empty
    (81) variable_block -> . VAR variables
    (89) empty -> .

    VAR             shift and go to state 7
    BEGIN           reduce using rule 89 (empty -> .)

    variable_block                 shift and go to state 203
    empty                          shift and go to state 6

state 195

    (5) functions -> FUNCTION ID LPAREN function_variables RPAREN COLON STRING SEMICOLON . variable_block main_body functions
    (80) variable_block -> . empty
    (81) variable_block -> . VAR variables
    (89) empty -> .

    VAR             shift and go to state 7
    BEGIN           reduce using rule 89 (empty -> .)

    variable_block                 shift and go to state 204
    empty                          shift and go to state 6

state 196

    (6) functions -> FUNCTION ID LPAREN function_variables RPAREN COLON CHARACTER SEMICOLON . variable_block main_body functions
    (80) variable_block -> . empty
    (81) variable_block -> . VAR variables
    (89) empty -> .

    VAR             shift and go to state 7
    BEGIN           reduce using rule 89 (empty -> .)

    variable_block                 shift and go to state 205
    empty                          shift and go to state 6

state 197

    (37) for_loop -> FOR ID ASSIGN TO INT DO main_body .

    WHILE           reduce using rule 37 (for_loop -> FOR ID ASSIGN TO INT DO main_body .)
    FOR             reduce using rule 37 (for_loop -> FOR ID ASSIGN TO INT DO main_body .)
    REPEAT          reduce using rule 37 (for_loop -> FOR ID ASSIGN TO INT DO main_body .)
    IF              reduce using rule 37 (for_loop -> FOR ID ASSIGN TO INT DO main_body .)
    LPAREN          reduce using rule 37 (for_loop -> FOR ID ASSIGN TO INT DO main_body .)
    ID              reduce using rule 37 (for_loop -> FOR ID ASSIGN TO INT DO main_body .)
    WRITE           reduce using rule 37 (for_loop -> FOR ID ASSIGN TO INT DO main_body .)
    INT             reduce using rule 37 (for_loop -> FOR ID ASSIGN TO INT DO main_body .)
    RE              reduce using rule 37 (for_loop -> FOR ID ASSIGN TO INT DO main_body .)
    END             reduce using rule 37 (for_loop -> FOR ID ASSIGN TO INT DO main_body .)
    UNTIL           reduce using rule 37 (for_loop -> FOR ID ASSIGN TO INT DO main_body .)


state 198

    (39) for_loop -> FOR ID ASSIGN INT DOWNTO INT DO . main_body
    (25) main_body -> . BEGIN body END

    BEGIN           shift and go to state 16

    main_body                      shift and go to state 206

state 199

    (40) for_loop -> FOR ID ASSIGN INT TO INT DO . main_body
    (25) main_body -> . BEGIN body END

    BEGIN           shift and go to state 16

    main_body                      shift and go to state 207

state 200

    (38) for_loop -> FOR ID ASSIGN DOWNTO INT DO main_body .

    WHILE           reduce using rule 38 (for_loop -> FOR ID ASSIGN DOWNTO INT DO main_body .)
    FOR             reduce using rule 38 (for_loop -> FOR ID ASSIGN DOWNTO INT DO main_body .)
    REPEAT          reduce using rule 38 (for_loop -> FOR ID ASSIGN DOWNTO INT DO main_body .)
    IF              reduce using rule 38 (for_loop -> FOR ID ASSIGN DOWNTO INT DO main_body .)
    LPAREN          reduce using rule 38 (for_loop -> FOR ID ASSIGN DOWNTO INT DO main_body .)
    ID              reduce using rule 38 (for_loop -> FOR ID ASSIGN DOWNTO INT DO main_body .)
    WRITE           reduce using rule 38 (for_loop -> FOR ID ASSIGN DOWNTO INT DO main_body .)
    INT             reduce using rule 38 (for_loop -> FOR ID ASSIGN DOWNTO INT DO main_body .)
    RE              reduce using rule 38 (for_loop -> FOR ID ASSIGN DOWNTO INT DO main_body .)
    END             reduce using rule 38 (for_loop -> FOR ID ASSIGN DOWNTO INT DO main_body .)
    UNTIL           reduce using rule 38 (for_loop -> FOR ID ASSIGN DOWNTO INT DO main_body .)


state 201

    (2) functions -> FUNCTION ID LPAREN function_variables RPAREN COLON INTEGER SEMICOLON variable_block . main_body functions
    (25) main_body -> . BEGIN body END

    BEGIN           shift and go to state 16

    main_body                      shift and go to state 208

state 202

    (3) functions -> FUNCTION ID LPAREN function_variables RPAREN COLON REAL SEMICOLON variable_block . main_body functions
    (25) main_body -> . BEGIN body END

    BEGIN           shift and go to state 16

    main_body                      shift and go to state 209

state 203

    (4) functions -> FUNCTION ID LPAREN function_variables RPAREN COLON BOOLEAN SEMICOLON variable_block . main_body functions
    (25) main_body -> . BEGIN body END

    BEGIN           shift and go to state 16

    main_body                      shift and go to state 210

state 204

    (5) functions -> FUNCTION ID LPAREN function_variables RPAREN COLON STRING SEMICOLON variable_block . main_body functions
    (25) main_body -> . BEGIN body END

    BEGIN           shift and go to state 16

    main_body                      shift and go to state 211

state 205

    (6) functions -> FUNCTION ID LPAREN function_variables RPAREN COLON CHARACTER SEMICOLON variable_block . main_body functions
    (25) main_body -> . BEGIN body END

    BEGIN           shift and go to state 16

    main_body                      shift and go to state 212

state 206

    (39) for_loop -> FOR ID ASSIGN INT DOWNTO INT DO main_body .

    WHILE           reduce using rule 39 (for_loop -> FOR ID ASSIGN INT DOWNTO INT DO main_body .)
    FOR             reduce using rule 39 (for_loop -> FOR ID ASSIGN INT DOWNTO INT DO main_body .)
    REPEAT          reduce using rule 39 (for_loop -> FOR ID ASSIGN INT DOWNTO INT DO main_body .)
    IF              reduce using rule 39 (for_loop -> FOR ID ASSIGN INT DOWNTO INT DO main_body .)
    LPAREN          reduce using rule 39 (for_loop -> FOR ID ASSIGN INT DOWNTO INT DO main_body .)
    ID              reduce using rule 39 (for_loop -> FOR ID ASSIGN INT DOWNTO INT DO main_body .)
    WRITE           reduce using rule 39 (for_loop -> FOR ID ASSIGN INT DOWNTO INT DO main_body .)
    INT             reduce using rule 39 (for_loop -> FOR ID ASSIGN INT DOWNTO INT DO main_body .)
    RE              reduce using rule 39 (for_loop -> FOR ID ASSIGN INT DOWNTO INT DO main_body .)
    END             reduce using rule 39 (for_loop -> FOR ID ASSIGN INT DOWNTO INT DO main_body .)
    UNTIL           reduce using rule 39 (for_loop -> FOR ID ASSIGN INT DOWNTO INT DO main_body .)


state 207

    (40) for_loop -> FOR ID ASSIGN INT TO INT DO main_body .

    WHILE           reduce using rule 40 (for_loop -> FOR ID ASSIGN INT TO INT DO main_body .)
    FOR             reduce using rule 40 (for_loop -> FOR ID ASSIGN INT TO INT DO main_body .)
    REPEAT          reduce using rule 40 (for_loop -> FOR ID ASSIGN INT TO INT DO main_body .)
    IF              reduce using rule 40 (for_loop -> FOR ID ASSIGN INT TO INT DO main_body .)
    LPAREN          reduce using rule 40 (for_loop -> FOR ID ASSIGN INT TO INT DO main_body .)
    ID              reduce using rule 40 (for_loop -> FOR ID ASSIGN INT TO INT DO main_body .)
    WRITE           reduce using rule 40 (for_loop -> FOR ID ASSIGN INT TO INT DO main_body .)
    INT             reduce using rule 40 (for_loop -> FOR ID ASSIGN INT TO INT DO main_body .)
    RE              reduce using rule 40 (for_loop -> FOR ID ASSIGN INT TO INT DO main_body .)
    END             reduce using rule 40 (for_loop -> FOR ID ASSIGN INT TO INT DO main_body .)
    UNTIL           reduce using rule 40 (for_loop -> FOR ID ASSIGN INT TO INT DO main_body .)


state 208

    (2) functions -> FUNCTION ID LPAREN function_variables RPAREN COLON INTEGER SEMICOLON variable_block main_body . functions
    (2) functions -> . FUNCTION ID LPAREN function_variables RPAREN COLON INTEGER SEMICOLON variable_block main_body functions
    (3) functions -> . FUNCTION ID LPAREN function_variables RPAREN COLON REAL SEMICOLON variable_block main_body functions
    (4) functions -> . FUNCTION ID LPAREN function_variables RPAREN COLON BOOLEAN SEMICOLON variable_block main_body functions
    (5) functions -> . FUNCTION ID LPAREN function_variables RPAREN COLON STRING SEMICOLON variable_block main_body functions
    (6) functions -> . FUNCTION ID LPAREN function_variables RPAREN COLON CHARACTER SEMICOLON variable_block main_body functions
    (7) functions -> . PROCEDURE ID SEMICOLON variable_block main_body functions
    (8) functions -> . empty
    (89) empty -> .

    FUNCTION        shift and go to state 9
    PROCEDURE       shift and go to state 10
    BEGIN           reduce using rule 89 (empty -> .)

    functions                      shift and go to state 213
    empty                          shift and go to state 11

state 209

    (3) functions -> FUNCTION ID LPAREN function_variables RPAREN COLON REAL SEMICOLON variable_block main_body . functions
    (2) functions -> . FUNCTION ID LPAREN function_variables RPAREN COLON INTEGER SEMICOLON variable_block main_body functions
    (3) functions -> . FUNCTION ID LPAREN function_variables RPAREN COLON REAL SEMICOLON variable_block main_body functions
    (4) functions -> . FUNCTION ID LPAREN function_variables RPAREN COLON BOOLEAN SEMICOLON variable_block main_body functions
    (5) functions -> . FUNCTION ID LPAREN function_variables RPAREN COLON STRING SEMICOLON variable_block main_body functions
    (6) functions -> . FUNCTION ID LPAREN function_variables RPAREN COLON CHARACTER SEMICOLON variable_block main_body functions
    (7) functions -> . PROCEDURE ID SEMICOLON variable_block main_body functions
    (8) functions -> . empty
    (89) empty -> .

    FUNCTION        shift and go to state 9
    PROCEDURE       shift and go to state 10
    BEGIN           reduce using rule 89 (empty -> .)

    functions                      shift and go to state 214
    empty                          shift and go to state 11

state 210

    (4) functions -> FUNCTION ID LPAREN function_variables RPAREN COLON BOOLEAN SEMICOLON variable_block main_body . functions
    (2) functions -> . FUNCTION ID LPAREN function_variables RPAREN COLON INTEGER SEMICOLON variable_block main_body functions
    (3) functions -> . FUNCTION ID LPAREN function_variables RPAREN COLON REAL SEMICOLON variable_block main_body functions
    (4) functions -> . FUNCTION ID LPAREN function_variables RPAREN COLON BOOLEAN SEMICOLON variable_block main_body functions
    (5) functions -> . FUNCTION ID LPAREN function_variables RPAREN COLON STRING SEMICOLON variable_block main_body functions
    (6) functions -> . FUNCTION ID LPAREN function_variables RPAREN COLON CHARACTER SEMICOLON variable_block main_body functions
    (7) functions -> . PROCEDURE ID SEMICOLON variable_block main_body functions
    (8) functions -> . empty
    (89) empty -> .

    FUNCTION        shift and go to state 9
    PROCEDURE       shift and go to state 10
    BEGIN           reduce using rule 89 (empty -> .)

    functions                      shift and go to state 215
    empty                          shift and go to state 11

state 211

    (5) functions -> FUNCTION ID LPAREN function_variables RPAREN COLON STRING SEMICOLON variable_block main_body . functions
    (2) functions -> . FUNCTION ID LPAREN function_variables RPAREN COLON INTEGER SEMICOLON variable_block main_body functions
    (3) functions -> . FUNCTION ID LPAREN function_variables RPAREN COLON REAL SEMICOLON variable_block main_body functions
    (4) functions -> . FUNCTION ID LPAREN function_variables RPAREN COLON BOOLEAN SEMICOLON variable_block main_body functions
    (5) functions -> . FUNCTION ID LPAREN function_variables RPAREN COLON STRING SEMICOLON variable_block main_body functions
    (6) functions -> . FUNCTION ID LPAREN function_variables RPAREN COLON CHARACTER SEMICOLON variable_block main_body functions
    (7) functions -> . PROCEDURE ID SEMICOLON variable_block main_body functions
    (8) functions -> . empty
    (89) empty -> .

    FUNCTION        shift and go to state 9
    PROCEDURE       shift and go to state 10
    BEGIN           reduce using rule 89 (empty -> .)

    functions                      shift and go to state 216
    empty                          shift and go to state 11

state 212

    (6) functions -> FUNCTION ID LPAREN function_variables RPAREN COLON CHARACTER SEMICOLON variable_block main_body . functions
    (2) functions -> . FUNCTION ID LPAREN function_variables RPAREN COLON INTEGER SEMICOLON variable_block main_body functions
    (3) functions -> . FUNCTION ID LPAREN function_variables RPAREN COLON REAL SEMICOLON variable_block main_body functions
    (4) functions -> . FUNCTION ID LPAREN function_variables RPAREN COLON BOOLEAN SEMICOLON variable_block main_body functions
    (5) functions -> . FUNCTION ID LPAREN function_variables RPAREN COLON STRING SEMICOLON variable_block main_body functions
    (6) functions -> . FUNCTION ID LPAREN function_variables RPAREN COLON CHARACTER SEMICOLON variable_block main_body functions
    (7) functions -> . PROCEDURE ID SEMICOLON variable_block main_body functions
    (8) functions -> . empty
    (89) empty -> .

    FUNCTION        shift and go to state 9
    PROCEDURE       shift and go to state 10
    BEGIN           reduce using rule 89 (empty -> .)

    functions                      shift and go to state 217
    empty                          shift and go to state 11

state 213

    (2) functions -> FUNCTION ID LPAREN function_variables RPAREN COLON INTEGER SEMICOLON variable_block main_body functions .

    BEGIN           reduce using rule 2 (functions -> FUNCTION ID LPAREN function_variables RPAREN COLON INTEGER SEMICOLON variable_block main_body functions .)


state 214

    (3) functions -> FUNCTION ID LPAREN function_variables RPAREN COLON REAL SEMICOLON variable_block main_body functions .

    BEGIN           reduce using rule 3 (functions -> FUNCTION ID LPAREN function_variables RPAREN COLON REAL SEMICOLON variable_block main_body functions .)


state 215

    (4) functions -> FUNCTION ID LPAREN function_variables RPAREN COLON BOOLEAN SEMICOLON variable_block main_body functions .

    BEGIN           reduce using rule 4 (functions -> FUNCTION ID LPAREN function_variables RPAREN COLON BOOLEAN SEMICOLON variable_block main_body functions .)


state 216

    (5) functions -> FUNCTION ID LPAREN function_variables RPAREN COLON STRING SEMICOLON variable_block main_body functions .

    BEGIN           reduce using rule 5 (functions -> FUNCTION ID LPAREN function_variables RPAREN COLON STRING SEMICOLON variable_block main_body functions .)


state 217

    (6) functions -> FUNCTION ID LPAREN function_variables RPAREN COLON CHARACTER SEMICOLON variable_block main_body functions .

    BEGIN           reduce using rule 6 (functions -> FUNCTION ID LPAREN function_variables RPAREN COLON CHARACTER SEMICOLON variable_block main_body functions .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LPAREN in state 32 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 66 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 88 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 88 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 88 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 88 resolved as shift
WARNING: shift/reduce conflict for MOD in state 88 resolved as shift
WARNING: shift/reduce conflict for AND in state 98 resolved as shift
WARNING: shift/reduce conflict for OR in state 98 resolved as shift
WARNING: shift/reduce conflict for AND in state 120 resolved as shift
WARNING: shift/reduce conflict for OR in state 120 resolved as shift
